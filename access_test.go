package protopatch_test

import (
	"testing"

	"github.com/stretchr/testify/require"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"

	"github.com/daishe/protopatch"
	"github.com/daishe/protopatch/internal/patchtest"
	protopatchv1 "github.com/daishe/protopatch/internal/testtypes/protopatch/v1"
)

func TestAccessAndGet(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name                 string        // name of the test
		given                proto.Message // base message
		givenAfterMutation   proto.Message // value of base massage after mutable access
		readOnlyPrePath      string        // extra read-oly access before the actual access
		path                 string        // access path - until last element Access / AccessMutable is used, last element is retrieved with Get / Mutable method.
		want                 any           // Get method successful result
		wantErr              error         // Get method unsuccessful result
		wantAccessErr        error         // Access unsuccessful result
		wantMutable          any           // Mutable method successful result
		wantMutableErr       error         // Mutable method unsuccessful result
		wantAccessMutableErr error         // AccessMutable unsuccessful result
		wantSelf             any           // Self method result for container acquired with Access function
		wantSelfMutable      any           // Self method result for container acquired with AccessMutable function
	}{
		// bool
		{
			name:     "bool/get",
			given:    &protopatchv1.TestMessage{Bool: true},
			path:     "bool",
			want:     true,
			wantSelf: &protopatchv1.TestMessage{Bool: true},
		},
		{
			name:          "bool/access",
			given:         &protopatchv1.TestMessage{Bool: true},
			path:          "bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/bool/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "bool",
			want:           false,
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/bool/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "bool.unknown",
			wantAccessErr:        protopatch.NewErrInPath("bool", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/bool/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Bool: true}},
			path:     "message.bool",
			want:     true,
			wantSelf: &protopatchv1.TestMessage{Bool: true},
		},
		{
			name:          "message/bool/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Bool: true}},
			path:          "message.bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/bool/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.bool",
			want:               false,
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/bool/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.bool.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-bool/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bool{Bool: true}},
			path:     "bool",
			want:     true,
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bool{Bool: true}},
		},
		{
			name:          "oneof/set-bool/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bool{Bool: true}},
			path:          "bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-bool/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bool{Bool: false}},
			path:               "bool",
			want:               false,
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-bool/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bool{Bool: false}},
			path:               "bool.unknown",
			wantAccessErr:      protopatch.NewErrInPath("bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/bool/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bool: true}}},
			path:     "message.bool",
			want:     true,
			wantSelf: &protopatchv1.TestMessage{Bool: true},
		},
		{
			name:          "oneof/set-message/bool/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bool: true}}},
			path:          "message.bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/bool/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bool: false}}},
			path:               "message.bool",
			want:               false,
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Bool: false},
		},
		{
			name:               "oneof/unset-message/bool/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bool: false}}},
			path:               "message.bool.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bool-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "bool",
			want:     []bool{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/bool-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "bool",
			want:           []bool{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "bool-list/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool",
			want:     []bool{true},
			wantSelf: &protopatchv1.TestList{Bool: []bool{true}},
		},
		{
			name:     "bool-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "bool.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []bool{},
		},
		{
			name:          "bool-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "bool.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/bool-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "bool",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []bool{},
		},
		{
			name:                 "nil-base/bool-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "bool",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "bool-list/item/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool.0",
			want:     true,
			wantSelf: []bool{true},
		},
		{
			name:          "bool-list/item/access",
			given:         &protopatchv1.TestList{Bool: []bool{true}},
			path:          "bool.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bool-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool.-1",
			want:     true,
			wantSelf: []bool{true},
		},
		{
			name:          "bool-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Bool: []bool{true}},
			path:          "bool.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bool-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []bool{true},
		},
		{
			name:          "bool-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Bool: []bool{true}},
			path:          "bool..unknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "bool-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []bool{true},
		},
		{
			name:          "bool-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Bool: []bool{true}},
			path:          "bool.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "bool-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Bool: []bool{true}},
			path:     "bool.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []bool{true},
		},
		{
			name:          "bool-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Bool: []bool{true}},
			path:          "bool.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("bool", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/bool/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Bool: true}}},
			path:     "message.0.bool",
			want:     true,
			wantSelf: &protopatchv1.TestMessage{Bool: true},
		},
		{
			name:          "message-list/item/bool/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Bool: true}}},
			path:          "message.0.bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.bool", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bool-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "boolToString",
			want:     map[bool]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/bool-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "boolToString",
			want:           map[bool]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "bool-to-string-map/get",
			given:    &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:     "boolToString",
			want:     map[bool]string{true: "aaa"},
			wantSelf: &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
		},
		{
			name:     "bool-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "boolToString.false",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "false"},
			wantSelf: map[bool]string{},
		},
		{
			name:          "bool-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "boolToString.false.unknown",
			wantAccessErr: protopatch.NewErrInPath("boolToString", protopatch.ErrNotFound{Kind: "key", Value: "false"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/bool-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "boolToString",
			path:            "false",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "false"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[bool]string{},
		},
		{
			name:                 "nil-base/bool-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "boolToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "false.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "false"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "bool-to-string-map/item/get",
			given:    &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:     "boolToString.true",
			want:     "aaa",
			wantSelf: map[bool]string{true: "aaa"},
		},
		{
			name:          "bool-to-string-map/item/access",
			given:         &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:          "boolToString.true.unknown",
			wantAccessErr: protopatch.NewErrInPath("boolToString.true", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bool-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:     "boolToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[bool]string{true: "aaa"},
		},
		{
			name:          "bool-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:          "boolToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("boolToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "bool-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:     "boolToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[bool]string{true: "aaa"},
		},
		{
			name:          "bool-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:          "boolToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("boolToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "bool-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:     "boolToString.false",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "false"},
			wantSelf: map[bool]string{true: "aaa"},
		},
		{
			name:          "bool-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{BoolToString: map[bool]string{true: "aaa"}},
			path:          "boolToString.false.unknown",
			wantAccessErr: protopatch.NewErrInPath("boolToString", protopatch.ErrNotFound{Kind: "key", Value: "false"}),
		},
		{
			name:     "string-to-bool-map/get",
			given:    &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:     "stringToBool",
			want:     map[string]bool{"aaa": true},
			wantSelf: &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
		},
		{
			name:     "string-to-bool-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToBool.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]bool{},
		},
		{
			name:          "string-to-bool-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToBool.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBool", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-bool-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToBool",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]bool{},
		},
		{
			name:                 "nil-base/string-to-bool-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToBool",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-bool-map/item/get",
			given:    &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:     "stringToBool.aaa",
			want:     true,
			wantSelf: map[string]bool{"aaa": true},
		},
		{
			name:          "string-to-bool-map/item/access",
			given:         &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:          "stringToBool.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBool.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-bool-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:     "stringToBool.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]bool{"aaa": true},
		},
		{
			name:          "string-to-bool-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:          "stringToBool..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBool", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-bool-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:     "stringToBool.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]bool{"aaa": true},
		},
		{
			name:          "string-to-bool-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToBool: map[string]bool{"aaa": true}},
			path:          "stringToBool.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBool", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/bool/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Bool: true}}},
			path:     "stringToMessage.aaa.bool",
			want:     true,
			wantSelf: &protopatchv1.TestMessage{Bool: true},
		},
		{
			name:          "string-to-message-map/item/bool/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Bool: true}}},
			path:          "stringToMessage.aaa.bool.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.bool", protopatch.ErrAccessToNonContainer),
		},

		// int32
		{
			name:     "int32/get",
			given:    &protopatchv1.TestMessage{Int32: 1},
			path:     "int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Int32: 1},
		},
		{
			name:          "int32/access",
			given:         &protopatchv1.TestMessage{Int32: 1},
			path:          "int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/int32/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "int32",
			want:           int32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/int32/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "int32.unknown",
			wantAccessErr:        protopatch.NewErrInPath("int32", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/int32/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Int32: 1}},
			path:     "message.int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Int32: 1},
		},
		{
			name:          "message/int32/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Int32: 1}},
			path:          "message.int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/int32/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.int32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/int32/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.int32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-int32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int32{Int32: 1}},
			path:     "int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int32{Int32: 1}},
		},
		{
			name:          "oneof/set-int32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int32{Int32: 1}},
			path:          "int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-int32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int32{Int32: 0}},
			path:               "int32",
			want:               int32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-int32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int32{Int32: 0}},
			path:               "int32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/int32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int32: 1}}},
			path:     "message.int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Int32: 1},
		},
		{
			name:          "oneof/set-message/int32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int32: 1}}},
			path:          "message.int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/int32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int32: 0}}},
			path:               "message.int32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Int32: 0},
		},
		{
			name:               "oneof/unset-message/int32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int32: 0}}},
			path:               "message.int32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int32-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "int32",
			want:     []int32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/int32-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "int32",
			want:           []int32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "int32-list/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32",
			want:     []int32{1},
			wantSelf: &protopatchv1.TestList{Int32: []int32{1}},
		},
		{
			name:     "int32-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "int32.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int32{},
		},
		{
			name:          "int32-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "int32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/int32-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "int32",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int32{},
		},
		{
			name:                 "nil-base/int32-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "int32",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "int32-list/item/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32.0",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "int32-list/item/access",
			given:         &protopatchv1.TestList{Int32: []int32{1}},
			path:          "int32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int32-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32.-1",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "int32-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Int32: []int32{1}},
			path:          "int32.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int32-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int32{1},
		},
		{
			name:          "int32-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Int32: []int32{1}},
			path:          "int32..unknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "int32-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int32{1},
		},
		{
			name:          "int32-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Int32: []int32{1}},
			path:          "int32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "int32-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Int32: []int32{1}},
			path:     "int32.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int32{1},
		},
		{
			name:          "int32-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Int32: []int32{1}},
			path:          "int32.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/int32/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Int32: 1}}},
			path:     "message.0.int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Int32: 1},
		},
		{
			name:          "message-list/item/int32/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Int32: 1}}},
			path:          "message.0.int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.int32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int32-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "int32ToString",
			want:     map[int32]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/int32-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "int32ToString",
			want:           map[int32]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "int32-to-string-map/get",
			given:    &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:     "int32ToString",
			want:     map[int32]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
		},
		{
			name:     "int32-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "int32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{},
		},
		{
			name:          "int32-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "int32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/int32-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "int32ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int32]string{},
		},
		{
			name:                 "nil-base/int32-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "int32ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "int32-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:     "int32ToString.1",
			want:     "aaa",
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "int32-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:          "int32ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int32-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:     "int32ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "int32-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:          "int32ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("int32ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "int32-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:     "int32ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "int32-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:          "int32ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("int32ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "int32-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:     "int32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "int32-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Int32ToString: map[int32]string{1: "aaa"}},
			path:          "int32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-int32-map/get",
			given:    &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:     "stringToInt32",
			want:     map[string]int32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
		},
		{
			name:     "string-to-int32-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToInt32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{},
		},
		{
			name:          "string-to-int32-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToInt32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-int32-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToInt32",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int32{},
		},
		{
			name:                 "nil-base/string-to-int32-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToInt32",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-int32-map/item/get",
			given:    &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:     "stringToInt32.aaa",
			want:     int32(1),
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-int32-map/item/access",
			given:         &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:          "stringToInt32.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt32.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-int32-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:     "stringToInt32.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-int32-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:          "stringToInt32..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt32", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-int32-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:     "stringToInt32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-int32-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToInt32: map[string]int32{"aaa": 1}},
			path:          "stringToInt32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/int32/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Int32: 1}}},
			path:     "stringToMessage.aaa.int32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Int32: 1},
		},
		{
			name:          "string-to-message-map/item/int32/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Int32: 1}}},
			path:          "stringToMessage.aaa.int32.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.int32", protopatch.ErrAccessToNonContainer),
		},

		// sint32
		{
			name:     "sint32/get",
			given:    &protopatchv1.TestMessage{Sint32: 1},
			path:     "sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sint32: 1},
		},
		{
			name:          "sint32/access",
			given:         &protopatchv1.TestMessage{Sint32: 1},
			path:          "sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/sint32/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "sint32",
			want:           int32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/sint32/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "sint32.unknown",
			wantAccessErr:        protopatch.NewErrInPath("sint32", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/sint32/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sint32: 1}},
			path:     "message.sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sint32: 1},
		},
		{
			name:          "message/sint32/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sint32: 1}},
			path:          "message.sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/sint32/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sint32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/sint32/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-sint32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint32{Sint32: 1}},
			path:     "sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint32{Sint32: 1}},
		},
		{
			name:          "oneof/set-sint32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint32{Sint32: 1}},
			path:          "sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-sint32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint32{Sint32: 0}},
			path:               "sint32",
			want:               int32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-sint32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint32{Sint32: 0}},
			path:               "sint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/sint32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint32: 1}}},
			path:     "message.sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sint32: 1},
		},
		{
			name:          "oneof/set-message/sint32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint32: 1}}},
			path:          "message.sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/sint32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint32: 0}}},
			path:               "message.sint32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Sint32: 0},
		},
		{
			name:               "oneof/unset-message/sint32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint32: 0}}},
			path:               "message.sint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint32-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "sint32",
			want:     []int32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/sint32-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "sint32",
			want:           []int32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "sint32-list/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32",
			want:     []int32{1},
			wantSelf: &protopatchv1.TestList{Sint32: []int32{1}},
		},
		{
			name:     "sint32-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "sint32.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int32{},
		},
		{
			name:          "sint32-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "sint32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/sint32-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "sint32",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int32{},
		},
		{
			name:                 "nil-base/sint32-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "sint32",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sint32-list/item/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32.0",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "sint32-list/item/access",
			given:         &protopatchv1.TestList{Sint32: []int32{1}},
			path:          "sint32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint32-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32.-1",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "sint32-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Sint32: []int32{1}},
			path:          "sint32.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint32-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int32{1},
		},
		{
			name:          "sint32-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Sint32: []int32{1}},
			path:          "sint32..unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "sint32-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int32{1},
		},
		{
			name:          "sint32-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Sint32: []int32{1}},
			path:          "sint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "sint32-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Sint32: []int32{1}},
			path:     "sint32.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int32{1},
		},
		{
			name:          "sint32-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Sint32: []int32{1}},
			path:          "sint32.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/sint32/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sint32: 1}}},
			path:     "message.0.sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sint32: 1},
		},
		{
			name:          "message-list/item/sint32/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sint32: 1}}},
			path:          "message.0.sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.sint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint32-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "sint32ToString",
			want:     map[int32]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/sint32-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "sint32ToString",
			want:           map[int32]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "sint32-to-string-map/get",
			given:    &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:     "sint32ToString",
			want:     map[int32]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
		},
		{
			name:     "sint32-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "sint32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{},
		},
		{
			name:          "sint32-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "sint32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/sint32-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "sint32ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int32]string{},
		},
		{
			name:                 "nil-base/sint32-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "sint32ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sint32-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:     "sint32ToString.1",
			want:     "aaa",
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sint32-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:          "sint32ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint32-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:     "sint32ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sint32-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:          "sint32ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "sint32-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:     "sint32ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sint32-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:          "sint32ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "sint32-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:     "sint32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sint32-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Sint32ToString: map[int32]string{1: "aaa"}},
			path:          "sint32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-sint32-map/get",
			given:    &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:     "stringToSint32",
			want:     map[string]int32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
		},
		{
			name:     "string-to-sint32-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToSint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{},
		},
		{
			name:          "string-to-sint32-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToSint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-sint32-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToSint32",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int32{},
		},
		{
			name:                 "nil-base/string-to-sint32-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToSint32",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-sint32-map/item/get",
			given:    &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:     "stringToSint32.aaa",
			want:     int32(1),
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sint32-map/item/access",
			given:         &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:          "stringToSint32.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint32.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-sint32-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:     "stringToSint32.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sint32-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:          "stringToSint32..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint32", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-sint32-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:     "stringToSint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sint32-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToSint32: map[string]int32{"aaa": 1}},
			path:          "stringToSint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/sint32/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sint32: 1}}},
			path:     "stringToMessage.aaa.sint32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sint32: 1},
		},
		{
			name:          "string-to-message-map/item/sint32/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sint32: 1}}},
			path:          "stringToMessage.aaa.sint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.sint32", protopatch.ErrAccessToNonContainer),
		},

		// sfixed32
		{
			name:     "sfixed32/get",
			given:    &protopatchv1.TestMessage{Sfixed32: 1},
			path:     "sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed32: 1},
		},
		{
			name:          "sfixed32/access",
			given:         &protopatchv1.TestMessage{Sfixed32: 1},
			path:          "sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/sfixed32/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "sfixed32",
			want:           int32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/sfixed32/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "sfixed32.unknown",
			wantAccessErr:        protopatch.NewErrInPath("sfixed32", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/sfixed32/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sfixed32: 1}},
			path:     "message.sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed32: 1},
		},
		{
			name:          "message/sfixed32/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sfixed32: 1}},
			path:          "message.sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/sfixed32/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sfixed32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/sfixed32/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sfixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-sfixed32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed32{Sfixed32: 1}},
			path:     "sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed32{Sfixed32: 1}},
		},
		{
			name:          "oneof/set-sfixed32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed32{Sfixed32: 1}},
			path:          "sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-sfixed32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed32{Sfixed32: 0}},
			path:               "sfixed32",
			want:               int32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-sfixed32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed32{Sfixed32: 0}},
			path:               "sfixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/sfixed32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed32: 1}}},
			path:     "message.sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed32: 1},
		},
		{
			name:          "oneof/set-message/sfixed32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed32: 1}}},
			path:          "message.sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/sfixed32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed32: 0}}},
			path:               "message.sfixed32",
			want:               int32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Sfixed32: 0},
		},
		{
			name:               "oneof/unset-message/sfixed32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed32: 0}}},
			path:               "message.sfixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed32-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "sfixed32",
			want:     []int32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/sfixed32-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "sfixed32",
			want:           []int32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "sfixed32-list/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32",
			want:     []int32{1},
			wantSelf: &protopatchv1.TestList{Sfixed32: []int32{1}},
		},
		{
			name:     "sfixed32-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "sfixed32.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int32{},
		},
		{
			name:          "sfixed32-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "sfixed32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/sfixed32-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "sfixed32",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int32{},
		},
		{
			name:                 "nil-base/sfixed32-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "sfixed32",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sfixed32-list/item/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32.0",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "sfixed32-list/item/access",
			given:         &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:          "sfixed32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed32-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32.-1",
			want:     int32(1),
			wantSelf: []int32{1},
		},
		{
			name:          "sfixed32-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:          "sfixed32.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed32-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int32{1},
		},
		{
			name:          "sfixed32-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:          "sfixed32..unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "sfixed32-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int32{1},
		},
		{
			name:          "sfixed32-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:          "sfixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "sfixed32-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:     "sfixed32.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int32{1},
		},
		{
			name:          "sfixed32-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Sfixed32: []int32{1}},
			path:          "sfixed32.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/sfixed32/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sfixed32: 1}}},
			path:     "message.0.sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed32: 1},
		},
		{
			name:          "message-list/item/sfixed32/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sfixed32: 1}}},
			path:          "message.0.sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.sfixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed32-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "sfixed32ToString",
			want:     map[int32]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/sfixed32-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "sfixed32ToString",
			want:           map[int32]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "sfixed32-to-string-map/get",
			given:    &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:     "sfixed32ToString",
			want:     map[int32]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
		},
		{
			name:     "sfixed32-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "sfixed32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{},
		},
		{
			name:          "sfixed32-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "sfixed32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/sfixed32-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "sfixed32ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int32]string{},
		},
		{
			name:                 "nil-base/sfixed32-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "sfixed32ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sfixed32-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:     "sfixed32ToString.1",
			want:     "aaa",
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sfixed32-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:          "sfixed32ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed32-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:     "sfixed32ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sfixed32-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:          "sfixed32ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "sfixed32-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:     "sfixed32ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sfixed32-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:          "sfixed32ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "sfixed32-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:     "sfixed32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int32]string{1: "aaa"},
		},
		{
			name:          "sfixed32-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed32ToString: map[int32]string{1: "aaa"}},
			path:          "sfixed32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-sfixed32-map/get",
			given:    &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:     "stringToSfixed32",
			want:     map[string]int32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
		},
		{
			name:     "string-to-sfixed32-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToSfixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{},
		},
		{
			name:          "string-to-sfixed32-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToSfixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-sfixed32-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToSfixed32",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int32{},
		},
		{
			name:                 "nil-base/string-to-sfixed32-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToSfixed32",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-sfixed32-map/item/get",
			given:    &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:     "stringToSfixed32.aaa",
			want:     int32(1),
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sfixed32-map/item/access",
			given:         &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:          "stringToSfixed32.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed32.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-sfixed32-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:     "stringToSfixed32.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sfixed32-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:          "stringToSfixed32..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed32", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-sfixed32-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:     "stringToSfixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int32{"aaa": 1},
		},
		{
			name:          "string-to-sfixed32-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToSfixed32: map[string]int32{"aaa": 1}},
			path:          "stringToSfixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/sfixed32/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sfixed32: 1}}},
			path:     "stringToMessage.aaa.sfixed32",
			want:     int32(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed32: 1},
		},
		{
			name:          "string-to-message-map/item/sfixed32/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sfixed32: 1}}},
			path:          "stringToMessage.aaa.sfixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.sfixed32", protopatch.ErrAccessToNonContainer),
		},

		// uint32
		{
			name:     "uint32/get",
			given:    &protopatchv1.TestMessage{Uint32: 1},
			path:     "uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Uint32: 1},
		},
		{
			name:          "uint32/access",
			given:         &protopatchv1.TestMessage{Uint32: 1},
			path:          "uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/uint32/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "uint32",
			want:           uint32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/uint32/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "uint32.unknown",
			wantAccessErr:        protopatch.NewErrInPath("uint32", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/uint32/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Uint32: 1}},
			path:     "message.uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Uint32: 1},
		},
		{
			name:          "message/uint32/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Uint32: 1}},
			path:          "message.uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/uint32/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.uint32",
			want:               uint32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/uint32/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.uint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-uint32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint32{Uint32: 1}},
			path:     "uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint32{Uint32: 1}},
		},
		{
			name:          "oneof/set-uint32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint32{Uint32: 1}},
			path:          "uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-uint32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint32{Uint32: 0}},
			path:               "uint32",
			want:               uint32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-uint32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint32{Uint32: 0}},
			path:               "uint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/uint32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint32: 1}}},
			path:     "message.uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Uint32: 1},
		},
		{
			name:          "oneof/set-message/uint32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint32: 1}}},
			path:          "message.uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/uint32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint32: 0}}},
			path:               "message.uint32",
			want:               uint32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Uint32: 0},
		},
		{
			name:               "oneof/unset-message/uint32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint32: 0}}},
			path:               "message.uint32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint32-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "uint32",
			want:     []uint32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/uint32-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "uint32",
			want:           []uint32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "uint32-list/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32",
			want:     []uint32{1},
			wantSelf: &protopatchv1.TestList{Uint32: []uint32{1}},
		},
		{
			name:     "uint32-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "uint32.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []uint32{},
		},
		{
			name:          "uint32-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "uint32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/uint32-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "uint32",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []uint32{},
		},
		{
			name:                 "nil-base/uint32-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "uint32",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "uint32-list/item/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32.0",
			want:     uint32(1),
			wantSelf: []uint32{1},
		},
		{
			name:          "uint32-list/item/access",
			given:         &protopatchv1.TestList{Uint32: []uint32{1}},
			path:          "uint32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint32-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32.-1",
			want:     uint32(1),
			wantSelf: []uint32{1},
		},
		{
			name:          "uint32-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Uint32: []uint32{1}},
			path:          "uint32.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint32-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []uint32{1},
		},
		{
			name:          "uint32-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Uint32: []uint32{1}},
			path:          "uint32..unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "uint32-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []uint32{1},
		},
		{
			name:          "uint32-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Uint32: []uint32{1}},
			path:          "uint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "uint32-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Uint32: []uint32{1}},
			path:     "uint32.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []uint32{1},
		},
		{
			name:          "uint32-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Uint32: []uint32{1}},
			path:          "uint32.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/uint32/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Uint32: 1}}},
			path:     "message.0.uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Uint32: 1},
		},
		{
			name:          "message-list/item/uint32/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Uint32: 1}}},
			path:          "message.0.uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.uint32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint32-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "uint32ToString",
			want:     map[uint32]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/uint32-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "uint32ToString",
			want:           map[uint32]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "uint32-to-string-map/get",
			given:    &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:     "uint32ToString",
			want:     map[uint32]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
		},
		{
			name:     "uint32-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "uint32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint32]string{},
		},
		{
			name:          "uint32-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "uint32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/uint32-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "uint32ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[uint32]string{},
		},
		{
			name:                 "nil-base/uint32-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "uint32ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "uint32-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:     "uint32ToString.1",
			want:     "aaa",
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "uint32-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:          "uint32ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint32-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:     "uint32ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "uint32-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:          "uint32ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "uint32-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:     "uint32ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "uint32-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:          "uint32ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("uint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "uint32-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:     "uint32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "uint32-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Uint32ToString: map[uint32]string{1: "aaa"}},
			path:          "uint32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-uint32-map/get",
			given:    &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:     "stringToUint32",
			want:     map[string]uint32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
		},
		{
			name:     "string-to-uint32-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToUint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint32{},
		},
		{
			name:          "string-to-uint32-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToUint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-uint32-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToUint32",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]uint32{},
		},
		{
			name:                 "nil-base/string-to-uint32-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToUint32",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-uint32-map/item/get",
			given:    &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:     "stringToUint32.aaa",
			want:     uint32(1),
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-uint32-map/item/access",
			given:         &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:          "stringToUint32.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint32.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-uint32-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:     "stringToUint32.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-uint32-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:          "stringToUint32..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint32", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-uint32-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:     "stringToUint32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-uint32-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToUint32: map[string]uint32{"aaa": 1}},
			path:          "stringToUint32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/uint32/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Uint32: 1}}},
			path:     "stringToMessage.aaa.uint32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Uint32: 1},
		},
		{
			name:          "string-to-message-map/item/uint32/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Uint32: 1}}},
			path:          "stringToMessage.aaa.uint32.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.uint32", protopatch.ErrAccessToNonContainer),
		},

		// fixed32
		{
			name:     "fixed32/get",
			given:    &protopatchv1.TestMessage{Fixed32: 1},
			path:     "fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Fixed32: 1},
		},
		{
			name:          "fixed32/access",
			given:         &protopatchv1.TestMessage{Fixed32: 1},
			path:          "fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/fixed32/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "fixed32",
			want:           uint32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/fixed32/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "fixed32.unknown",
			wantAccessErr:        protopatch.NewErrInPath("fixed32", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/fixed32/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Fixed32: 1}},
			path:     "message.fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Fixed32: 1},
		},
		{
			name:          "message/fixed32/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Fixed32: 1}},
			path:          "message.fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/fixed32/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.fixed32",
			want:               uint32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/fixed32/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.fixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-fixed32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed32{Fixed32: 1}},
			path:     "fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed32{Fixed32: 1}},
		},
		{
			name:          "oneof/set-fixed32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed32{Fixed32: 1}},
			path:          "fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-fixed32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed32{Fixed32: 0}},
			path:               "fixed32",
			want:               uint32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-fixed32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed32{Fixed32: 0}},
			path:               "fixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/fixed32/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed32: 1}}},
			path:     "message.fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Fixed32: 1},
		},
		{
			name:          "oneof/set-message/fixed32/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed32: 1}}},
			path:          "message.fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/fixed32/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed32: 0}}},
			path:               "message.fixed32",
			want:               uint32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Fixed32: 0},
		},
		{
			name:               "oneof/unset-message/fixed32/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed32: 0}}},
			path:               "message.fixed32.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed32-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "fixed32",
			want:     []uint32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/fixed32-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "fixed32",
			want:           []uint32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "fixed32-list/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32",
			want:     []uint32{1},
			wantSelf: &protopatchv1.TestList{Fixed32: []uint32{1}},
		},
		{
			name:     "fixed32-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "fixed32.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []uint32{},
		},
		{
			name:          "fixed32-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "fixed32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/fixed32-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "fixed32",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []uint32{},
		},
		{
			name:                 "nil-base/fixed32-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "fixed32",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "fixed32-list/item/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32.0",
			want:     uint32(1),
			wantSelf: []uint32{1},
		},
		{
			name:          "fixed32-list/item/access",
			given:         &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:          "fixed32.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed32-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32.-1",
			want:     uint32(1),
			wantSelf: []uint32{1},
		},
		{
			name:          "fixed32-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:          "fixed32.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed32-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []uint32{1},
		},
		{
			name:          "fixed32-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:          "fixed32..unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "fixed32-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []uint32{1},
		},
		{
			name:          "fixed32-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:          "fixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "fixed32-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:     "fixed32.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []uint32{1},
		},
		{
			name:          "fixed32-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Fixed32: []uint32{1}},
			path:          "fixed32.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/fixed32/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Fixed32: 1}}},
			path:     "message.0.fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Fixed32: 1},
		},
		{
			name:          "message-list/item/fixed32/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Fixed32: 1}}},
			path:          "message.0.fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.fixed32", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed32-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "fixed32ToString",
			want:     map[uint32]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/fixed32-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "fixed32ToString",
			want:           map[uint32]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "fixed32-to-string-map/get",
			given:    &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:     "fixed32ToString",
			want:     map[uint32]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
		},
		{
			name:     "fixed32-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "fixed32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint32]string{},
		},
		{
			name:          "fixed32-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "fixed32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/fixed32-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "fixed32ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[uint32]string{},
		},
		{
			name:                 "nil-base/fixed32-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "fixed32ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "fixed32-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:     "fixed32ToString.1",
			want:     "aaa",
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "fixed32-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:          "fixed32ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed32-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:     "fixed32ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "fixed32-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:          "fixed32ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "fixed32-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:     "fixed32ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "fixed32-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:          "fixed32ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "fixed32-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:     "fixed32ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint32]string{1: "aaa"},
		},
		{
			name:          "fixed32-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Fixed32ToString: map[uint32]string{1: "aaa"}},
			path:          "fixed32ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed32ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-fixed32-map/get",
			given:    &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:     "stringToFixed32",
			want:     map[string]uint32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
		},
		{
			name:     "string-to-fixed32-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToFixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint32{},
		},
		{
			name:          "string-to-fixed32-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToFixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-fixed32-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToFixed32",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]uint32{},
		},
		{
			name:                 "nil-base/string-to-fixed32-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToFixed32",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-fixed32-map/item/get",
			given:    &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:     "stringToFixed32.aaa",
			want:     uint32(1),
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-fixed32-map/item/access",
			given:         &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:          "stringToFixed32.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed32.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-fixed32-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:     "stringToFixed32.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-fixed32-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:          "stringToFixed32..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed32", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-fixed32-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:     "stringToFixed32.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint32{"aaa": 1},
		},
		{
			name:          "string-to-fixed32-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToFixed32: map[string]uint32{"aaa": 1}},
			path:          "stringToFixed32.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed32", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/fixed32/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Fixed32: 1}}},
			path:     "stringToMessage.aaa.fixed32",
			want:     uint32(1),
			wantSelf: &protopatchv1.TestMessage{Fixed32: 1},
		},
		{
			name:          "string-to-message-map/item/fixed32/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Fixed32: 1}}},
			path:          "stringToMessage.aaa.fixed32.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.fixed32", protopatch.ErrAccessToNonContainer),
		},

		// int64
		{
			name:     "int64/get",
			given:    &protopatchv1.TestMessage{Int64: 1},
			path:     "int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Int64: 1},
		},
		{
			name:          "int64/access",
			given:         &protopatchv1.TestMessage{Int64: 1},
			path:          "int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/int64/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "int64",
			want:           int64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/int64/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "int64.unknown",
			wantAccessErr:        protopatch.NewErrInPath("int64", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/int64/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Int64: 1}},
			path:     "message.int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Int64: 1},
		},
		{
			name:          "message/int64/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Int64: 1}},
			path:          "message.int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/int64/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.int64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/int64/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.int64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-int64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int64{Int64: 1}},
			path:     "int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int64{Int64: 1}},
		},
		{
			name:          "oneof/set-int64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int64{Int64: 1}},
			path:          "int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-int64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int64{Int64: 0}},
			path:               "int64",
			want:               int64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-int64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Int64{Int64: 0}},
			path:               "int64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/int64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int64: 1}}},
			path:     "message.int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Int64: 1},
		},
		{
			name:          "oneof/set-message/int64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int64: 1}}},
			path:          "message.int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/int64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int64: 0}}},
			path:               "message.int64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Int64: 0},
		},
		{
			name:               "oneof/unset-message/int64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Int64: 0}}},
			path:               "message.int64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int64-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "int64",
			want:     []int64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/int64-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "int64",
			want:           []int64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "int64-list/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64",
			want:     []int64{1},
			wantSelf: &protopatchv1.TestList{Int64: []int64{1}},
		},
		{
			name:     "int64-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "int64.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int64{},
		},
		{
			name:          "int64-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "int64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/int64-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "int64",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int64{},
		},
		{
			name:                 "nil-base/int64-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "int64",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "int64-list/item/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64.0",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "int64-list/item/access",
			given:         &protopatchv1.TestList{Int64: []int64{1}},
			path:          "int64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int64-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64.-1",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "int64-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Int64: []int64{1}},
			path:          "int64.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int64-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int64{1},
		},
		{
			name:          "int64-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Int64: []int64{1}},
			path:          "int64..unknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "int64-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int64{1},
		},
		{
			name:          "int64-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Int64: []int64{1}},
			path:          "int64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "int64-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Int64: []int64{1}},
			path:     "int64.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int64{1},
		},
		{
			name:          "int64-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Int64: []int64{1}},
			path:          "int64.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/int64/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Int64: 1}}},
			path:     "message.0.int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Int64: 1},
		},
		{
			name:          "message-list/item/int64/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Int64: 1}}},
			path:          "message.0.int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.int64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int64-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "int64ToString",
			want:     map[int64]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/int64-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "int64ToString",
			want:           map[int64]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "int64-to-string-map/get",
			given:    &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:     "int64ToString",
			want:     map[int64]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
		},
		{
			name:     "int64-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "int64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{},
		},
		{
			name:          "int64-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "int64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/int64-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "int64ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int64]string{},
		},
		{
			name:                 "nil-base/int64-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "int64ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "int64-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:     "int64ToString.1",
			want:     "aaa",
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "int64-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:          "int64ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "int64-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:     "int64ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "int64-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:          "int64ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("int64ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "int64-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:     "int64ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "int64-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:          "int64ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("int64ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "int64-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:     "int64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "int64-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Int64ToString: map[int64]string{1: "aaa"}},
			path:          "int64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("int64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-int64-map/get",
			given:    &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:     "stringToInt64",
			want:     map[string]int64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
		},
		{
			name:     "string-to-int64-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToInt64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{},
		},
		{
			name:          "string-to-int64-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToInt64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-int64-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToInt64",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int64{},
		},
		{
			name:                 "nil-base/string-to-int64-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToInt64",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-int64-map/item/get",
			given:    &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:     "stringToInt64.aaa",
			want:     int64(1),
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-int64-map/item/access",
			given:         &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:          "stringToInt64.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt64.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-int64-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:     "stringToInt64.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-int64-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:          "stringToInt64..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt64", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-int64-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:     "stringToInt64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-int64-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToInt64: map[string]int64{"aaa": 1}},
			path:          "stringToInt64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToInt64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/int64/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Int64: 1}}},
			path:     "stringToMessage.aaa.int64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Int64: 1},
		},
		{
			name:          "string-to-message-map/item/int64/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Int64: 1}}},
			path:          "stringToMessage.aaa.int64.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.int64", protopatch.ErrAccessToNonContainer),
		},

		// sint64
		{
			name:     "sint64/get",
			given:    &protopatchv1.TestMessage{Sint64: 1},
			path:     "sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sint64: 1},
		},
		{
			name:          "sint64/access",
			given:         &protopatchv1.TestMessage{Sint64: 1},
			path:          "sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/sint64/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "sint64",
			want:           int64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/sint64/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "sint64.unknown",
			wantAccessErr:        protopatch.NewErrInPath("sint64", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/sint64/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sint64: 1}},
			path:     "message.sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sint64: 1},
		},
		{
			name:          "message/sint64/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sint64: 1}},
			path:          "message.sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/sint64/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sint64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/sint64/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-sint64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint64{Sint64: 1}},
			path:     "sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint64{Sint64: 1}},
		},
		{
			name:          "oneof/set-sint64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint64{Sint64: 1}},
			path:          "sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-sint64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint64{Sint64: 0}},
			path:               "sint64",
			want:               int64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-sint64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sint64{Sint64: 0}},
			path:               "sint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/sint64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint64: 1}}},
			path:     "message.sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sint64: 1},
		},
		{
			name:          "oneof/set-message/sint64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint64: 1}}},
			path:          "message.sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/sint64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint64: 0}}},
			path:               "message.sint64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Sint64: 0},
		},
		{
			name:               "oneof/unset-message/sint64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sint64: 0}}},
			path:               "message.sint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint64-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "sint64",
			want:     []int64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/sint64-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "sint64",
			want:           []int64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "sint64-list/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64",
			want:     []int64{1},
			wantSelf: &protopatchv1.TestList{Sint64: []int64{1}},
		},
		{
			name:     "sint64-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "sint64.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int64{},
		},
		{
			name:          "sint64-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "sint64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/sint64-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "sint64",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int64{},
		},
		{
			name:                 "nil-base/sint64-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "sint64",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sint64-list/item/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64.0",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "sint64-list/item/access",
			given:         &protopatchv1.TestList{Sint64: []int64{1}},
			path:          "sint64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint64-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64.-1",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "sint64-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Sint64: []int64{1}},
			path:          "sint64.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint64-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int64{1},
		},
		{
			name:          "sint64-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Sint64: []int64{1}},
			path:          "sint64..unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "sint64-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int64{1},
		},
		{
			name:          "sint64-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Sint64: []int64{1}},
			path:          "sint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "sint64-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Sint64: []int64{1}},
			path:     "sint64.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int64{1},
		},
		{
			name:          "sint64-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Sint64: []int64{1}},
			path:          "sint64.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/sint64/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sint64: 1}}},
			path:     "message.0.sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sint64: 1},
		},
		{
			name:          "message-list/item/sint64/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sint64: 1}}},
			path:          "message.0.sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.sint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint64-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "sint64ToString",
			want:     map[int64]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/sint64-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "sint64ToString",
			want:           map[int64]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "sint64-to-string-map/get",
			given:    &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:     "sint64ToString",
			want:     map[int64]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
		},
		{
			name:     "sint64-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "sint64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{},
		},
		{
			name:          "sint64-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "sint64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/sint64-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "sint64ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int64]string{},
		},
		{
			name:                 "nil-base/sint64-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "sint64ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sint64-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:     "sint64ToString.1",
			want:     "aaa",
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sint64-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:          "sint64ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sint64-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:     "sint64ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sint64-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:          "sint64ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "sint64-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:     "sint64ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sint64-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:          "sint64ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "sint64-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:     "sint64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sint64-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Sint64ToString: map[int64]string{1: "aaa"}},
			path:          "sint64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-sint64-map/get",
			given:    &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:     "stringToSint64",
			want:     map[string]int64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
		},
		{
			name:     "string-to-sint64-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToSint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{},
		},
		{
			name:          "string-to-sint64-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToSint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-sint64-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToSint64",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int64{},
		},
		{
			name:                 "nil-base/string-to-sint64-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToSint64",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-sint64-map/item/get",
			given:    &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:     "stringToSint64.aaa",
			want:     int64(1),
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sint64-map/item/access",
			given:         &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:          "stringToSint64.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint64.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-sint64-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:     "stringToSint64.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sint64-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:          "stringToSint64..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint64", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-sint64-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:     "stringToSint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sint64-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToSint64: map[string]int64{"aaa": 1}},
			path:          "stringToSint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSint64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/sint64/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sint64: 1}}},
			path:     "stringToMessage.aaa.sint64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sint64: 1},
		},
		{
			name:          "string-to-message-map/item/sint64/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sint64: 1}}},
			path:          "stringToMessage.aaa.sint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.sint64", protopatch.ErrAccessToNonContainer),
		},

		// sfixed64
		{
			name:     "sfixed64/get",
			given:    &protopatchv1.TestMessage{Sfixed64: 1},
			path:     "sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed64: 1},
		},
		{
			name:          "sfixed64/access",
			given:         &protopatchv1.TestMessage{Sfixed64: 1},
			path:          "sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/sfixed64/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "sfixed64",
			want:           int64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/sfixed64/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "sfixed64.unknown",
			wantAccessErr:        protopatch.NewErrInPath("sfixed64", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/sfixed64/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sfixed64: 1}},
			path:     "message.sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed64: 1},
		},
		{
			name:          "message/sfixed64/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Sfixed64: 1}},
			path:          "message.sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/sfixed64/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sfixed64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/sfixed64/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.sfixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-sfixed64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed64{Sfixed64: 1}},
			path:     "sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed64{Sfixed64: 1}},
		},
		{
			name:          "oneof/set-sfixed64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed64{Sfixed64: 1}},
			path:          "sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-sfixed64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed64{Sfixed64: 0}},
			path:               "sfixed64",
			want:               int64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-sfixed64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Sfixed64{Sfixed64: 0}},
			path:               "sfixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/sfixed64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed64: 1}}},
			path:     "message.sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed64: 1},
		},
		{
			name:          "oneof/set-message/sfixed64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed64: 1}}},
			path:          "message.sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/sfixed64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed64: 0}}},
			path:               "message.sfixed64",
			want:               int64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Sfixed64: 0},
		},
		{
			name:               "oneof/unset-message/sfixed64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Sfixed64: 0}}},
			path:               "message.sfixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed64-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "sfixed64",
			want:     []int64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/sfixed64-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "sfixed64",
			want:           []int64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "sfixed64-list/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64",
			want:     []int64{1},
			wantSelf: &protopatchv1.TestList{Sfixed64: []int64{1}},
		},
		{
			name:     "sfixed64-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "sfixed64.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []int64{},
		},
		{
			name:          "sfixed64-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "sfixed64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/sfixed64-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "sfixed64",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []int64{},
		},
		{
			name:                 "nil-base/sfixed64-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "sfixed64",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sfixed64-list/item/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64.0",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "sfixed64-list/item/access",
			given:         &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:          "sfixed64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed64-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64.-1",
			want:     int64(1),
			wantSelf: []int64{1},
		},
		{
			name:          "sfixed64-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:          "sfixed64.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed64-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []int64{1},
		},
		{
			name:          "sfixed64-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:          "sfixed64..unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "sfixed64-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []int64{1},
		},
		{
			name:          "sfixed64-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:          "sfixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "sfixed64-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:     "sfixed64.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []int64{1},
		},
		{
			name:          "sfixed64-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Sfixed64: []int64{1}},
			path:          "sfixed64.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/sfixed64/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sfixed64: 1}}},
			path:     "message.0.sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed64: 1},
		},
		{
			name:          "message-list/item/sfixed64/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Sfixed64: 1}}},
			path:          "message.0.sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.sfixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed64-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "sfixed64ToString",
			want:     map[int64]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/sfixed64-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "sfixed64ToString",
			want:           map[int64]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "sfixed64-to-string-map/get",
			given:    &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:     "sfixed64ToString",
			want:     map[int64]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
		},
		{
			name:     "sfixed64-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "sfixed64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{},
		},
		{
			name:          "sfixed64-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "sfixed64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/sfixed64-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "sfixed64ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[int64]string{},
		},
		{
			name:                 "nil-base/sfixed64-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "sfixed64ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "sfixed64-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:     "sfixed64ToString.1",
			want:     "aaa",
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sfixed64-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:          "sfixed64ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "sfixed64-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:     "sfixed64ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sfixed64-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:          "sfixed64ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "sfixed64-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:     "sfixed64ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sfixed64-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:          "sfixed64ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "sfixed64-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:     "sfixed64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[int64]string{1: "aaa"},
		},
		{
			name:          "sfixed64-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Sfixed64ToString: map[int64]string{1: "aaa"}},
			path:          "sfixed64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("sfixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-sfixed64-map/get",
			given:    &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:     "stringToSfixed64",
			want:     map[string]int64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
		},
		{
			name:     "string-to-sfixed64-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToSfixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{},
		},
		{
			name:          "string-to-sfixed64-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToSfixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-sfixed64-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToSfixed64",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]int64{},
		},
		{
			name:                 "nil-base/string-to-sfixed64-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToSfixed64",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-sfixed64-map/item/get",
			given:    &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:     "stringToSfixed64.aaa",
			want:     int64(1),
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sfixed64-map/item/access",
			given:         &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:          "stringToSfixed64.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed64.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-sfixed64-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:     "stringToSfixed64.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sfixed64-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:          "stringToSfixed64..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed64", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-sfixed64-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:     "stringToSfixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]int64{"aaa": 1},
		},
		{
			name:          "string-to-sfixed64-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToSfixed64: map[string]int64{"aaa": 1}},
			path:          "stringToSfixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToSfixed64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/sfixed64/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sfixed64: 1}}},
			path:     "stringToMessage.aaa.sfixed64",
			want:     int64(1),
			wantSelf: &protopatchv1.TestMessage{Sfixed64: 1},
		},
		{
			name:          "string-to-message-map/item/sfixed64/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Sfixed64: 1}}},
			path:          "stringToMessage.aaa.sfixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.sfixed64", protopatch.ErrAccessToNonContainer),
		},

		// uint64
		{
			name:     "uint64/get",
			given:    &protopatchv1.TestMessage{Uint64: 1},
			path:     "uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Uint64: 1},
		},
		{
			name:          "uint64/access",
			given:         &protopatchv1.TestMessage{Uint64: 1},
			path:          "uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/uint64/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "uint64",
			want:           uint64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/uint64/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "uint64.unknown",
			wantAccessErr:        protopatch.NewErrInPath("uint64", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/uint64/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Uint64: 1}},
			path:     "message.uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Uint64: 1},
		},
		{
			name:          "message/uint64/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Uint64: 1}},
			path:          "message.uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/uint64/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.uint64",
			want:               uint64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/uint64/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.uint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-uint64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint64{Uint64: 1}},
			path:     "uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint64{Uint64: 1}},
		},
		{
			name:          "oneof/set-uint64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint64{Uint64: 1}},
			path:          "uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-uint64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint64{Uint64: 0}},
			path:               "uint64",
			want:               uint64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-uint64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Uint64{Uint64: 0}},
			path:               "uint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/uint64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint64: 1}}},
			path:     "message.uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Uint64: 1},
		},
		{
			name:          "oneof/set-message/uint64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint64: 1}}},
			path:          "message.uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/uint64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint64: 0}}},
			path:               "message.uint64",
			want:               uint64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Uint64: 0},
		},
		{
			name:               "oneof/unset-message/uint64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Uint64: 0}}},
			path:               "message.uint64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint64-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "uint64",
			want:     []uint64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/uint64-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "uint64",
			want:           []uint64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "uint64-list/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64",
			want:     []uint64{1},
			wantSelf: &protopatchv1.TestList{Uint64: []uint64{1}},
		},
		{
			name:     "uint64-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "uint64.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []uint64{},
		},
		{
			name:          "uint64-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "uint64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/uint64-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "uint64",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []uint64{},
		},
		{
			name:                 "nil-base/uint64-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "uint64",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "uint64-list/item/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64.0",
			want:     uint64(1),
			wantSelf: []uint64{1},
		},
		{
			name:          "uint64-list/item/access",
			given:         &protopatchv1.TestList{Uint64: []uint64{1}},
			path:          "uint64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint64-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64.-1",
			want:     uint64(1),
			wantSelf: []uint64{1},
		},
		{
			name:          "uint64-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Uint64: []uint64{1}},
			path:          "uint64.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint64-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []uint64{1},
		},
		{
			name:          "uint64-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Uint64: []uint64{1}},
			path:          "uint64..unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "uint64-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []uint64{1},
		},
		{
			name:          "uint64-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Uint64: []uint64{1}},
			path:          "uint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "uint64-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Uint64: []uint64{1}},
			path:     "uint64.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []uint64{1},
		},
		{
			name:          "uint64-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Uint64: []uint64{1}},
			path:          "uint64.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/uint64/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Uint64: 1}}},
			path:     "message.0.uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Uint64: 1},
		},
		{
			name:          "message-list/item/uint64/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Uint64: 1}}},
			path:          "message.0.uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.uint64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint64-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "uint64ToString",
			want:     map[uint64]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/uint64-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "uint64ToString",
			want:           map[uint64]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "uint64-to-string-map/get",
			given:    &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:     "uint64ToString",
			want:     map[uint64]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
		},
		{
			name:     "uint64-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "uint64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint64]string{},
		},
		{
			name:          "uint64-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "uint64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/uint64-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "uint64ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[uint64]string{},
		},
		{
			name:                 "nil-base/uint64-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "uint64ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "uint64-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:     "uint64ToString.1",
			want:     "aaa",
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "uint64-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:          "uint64ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "uint64-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:     "uint64ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "uint64-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:          "uint64ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "uint64-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:     "uint64ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "uint64-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:          "uint64ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("uint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "uint64-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:     "uint64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "uint64-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Uint64ToString: map[uint64]string{1: "aaa"}},
			path:          "uint64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("uint64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-uint64-map/get",
			given:    &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:     "stringToUint64",
			want:     map[string]uint64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
		},
		{
			name:     "string-to-uint64-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToUint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint64{},
		},
		{
			name:          "string-to-uint64-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToUint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-uint64-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToUint64",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]uint64{},
		},
		{
			name:                 "nil-base/string-to-uint64-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToUint64",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-uint64-map/item/get",
			given:    &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:     "stringToUint64.aaa",
			want:     uint64(1),
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-uint64-map/item/access",
			given:         &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:          "stringToUint64.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint64.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-uint64-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:     "stringToUint64.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-uint64-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:          "stringToUint64..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint64", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-uint64-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:     "stringToUint64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-uint64-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToUint64: map[string]uint64{"aaa": 1}},
			path:          "stringToUint64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToUint64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/uint64/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Uint64: 1}}},
			path:     "stringToMessage.aaa.uint64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Uint64: 1},
		},
		{
			name:          "string-to-message-map/item/uint64/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Uint64: 1}}},
			path:          "stringToMessage.aaa.uint64.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.uint64", protopatch.ErrAccessToNonContainer),
		},

		// fixed64
		{
			name:     "fixed64/get",
			given:    &protopatchv1.TestMessage{Fixed64: 1},
			path:     "fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Fixed64: 1},
		},
		{
			name:          "fixed64/access",
			given:         &protopatchv1.TestMessage{Fixed64: 1},
			path:          "fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/fixed64/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "fixed64",
			want:           uint64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/fixed64/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "fixed64.unknown",
			wantAccessErr:        protopatch.NewErrInPath("fixed64", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/fixed64/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Fixed64: 1}},
			path:     "message.fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Fixed64: 1},
		},
		{
			name:          "message/fixed64/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Fixed64: 1}},
			path:          "message.fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/fixed64/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.fixed64",
			want:               uint64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/fixed64/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.fixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-fixed64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed64{Fixed64: 1}},
			path:     "fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed64{Fixed64: 1}},
		},
		{
			name:          "oneof/set-fixed64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed64{Fixed64: 1}},
			path:          "fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-fixed64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed64{Fixed64: 0}},
			path:               "fixed64",
			want:               uint64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-fixed64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Fixed64{Fixed64: 0}},
			path:               "fixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/fixed64/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed64: 1}}},
			path:     "message.fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Fixed64: 1},
		},
		{
			name:          "oneof/set-message/fixed64/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed64: 1}}},
			path:          "message.fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/fixed64/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed64: 0}}},
			path:               "message.fixed64",
			want:               uint64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Fixed64: 0},
		},
		{
			name:               "oneof/unset-message/fixed64/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Fixed64: 0}}},
			path:               "message.fixed64.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed64-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "fixed64",
			want:     []uint64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/fixed64-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "fixed64",
			want:           []uint64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "fixed64-list/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64",
			want:     []uint64{1},
			wantSelf: &protopatchv1.TestList{Fixed64: []uint64{1}},
		},
		{
			name:     "fixed64-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "fixed64.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []uint64{},
		},
		{
			name:          "fixed64-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "fixed64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/fixed64-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "fixed64",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []uint64{},
		},
		{
			name:                 "nil-base/fixed64-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "fixed64",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "fixed64-list/item/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64.0",
			want:     uint64(1),
			wantSelf: []uint64{1},
		},
		{
			name:          "fixed64-list/item/access",
			given:         &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:          "fixed64.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed64-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64.-1",
			want:     uint64(1),
			wantSelf: []uint64{1},
		},
		{
			name:          "fixed64-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:          "fixed64.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed64-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []uint64{1},
		},
		{
			name:          "fixed64-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:          "fixed64..unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "fixed64-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []uint64{1},
		},
		{
			name:          "fixed64-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:          "fixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "fixed64-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:     "fixed64.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []uint64{1},
		},
		{
			name:          "fixed64-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Fixed64: []uint64{1}},
			path:          "fixed64.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/fixed64/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Fixed64: 1}}},
			path:     "message.0.fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Fixed64: 1},
		},
		{
			name:          "message-list/item/fixed64/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Fixed64: 1}}},
			path:          "message.0.fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.fixed64", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed64-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "fixed64ToString",
			want:     map[uint64]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/fixed64-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "fixed64ToString",
			want:           map[uint64]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "fixed64-to-string-map/get",
			given:    &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:     "fixed64ToString",
			want:     map[uint64]string{1: "aaa"},
			wantSelf: &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
		},
		{
			name:     "fixed64-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "fixed64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint64]string{},
		},
		{
			name:          "fixed64-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "fixed64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/fixed64-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "fixed64ToString",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[uint64]string{},
		},
		{
			name:                 "nil-base/fixed64-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "fixed64ToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "fixed64-to-string-map/item/get",
			given:    &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:     "fixed64ToString.1",
			want:     "aaa",
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "fixed64-to-string-map/item/access",
			given:         &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:          "fixed64ToString.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64ToString.1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "fixed64-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:     "fixed64ToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "fixed64-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:          "fixed64ToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "fixed64-to-string-map/invalid-key-item/get",
			given:    &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:     "fixed64ToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "fixed64-to-string-map/invalid-key-item/access",
			given:         &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:          "fixed64ToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "fixed64-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:     "fixed64ToString.0",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "0"},
			wantSelf: map[uint64]string{1: "aaa"},
		},
		{
			name:          "fixed64-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{Fixed64ToString: map[uint64]string{1: "aaa"}},
			path:          "fixed64ToString.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("fixed64ToString", protopatch.ErrNotFound{Kind: "key", Value: "0"}),
		},
		{
			name:     "string-to-fixed64-map/get",
			given:    &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:     "stringToFixed64",
			want:     map[string]uint64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
		},
		{
			name:     "string-to-fixed64-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToFixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint64{},
		},
		{
			name:          "string-to-fixed64-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToFixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-fixed64-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToFixed64",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]uint64{},
		},
		{
			name:                 "nil-base/string-to-fixed64-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToFixed64",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-fixed64-map/item/get",
			given:    &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:     "stringToFixed64.aaa",
			want:     uint64(1),
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-fixed64-map/item/access",
			given:         &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:          "stringToFixed64.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed64.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-fixed64-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:     "stringToFixed64.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-fixed64-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:          "stringToFixed64..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed64", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-fixed64-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:     "stringToFixed64.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]uint64{"aaa": 1},
		},
		{
			name:          "string-to-fixed64-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToFixed64: map[string]uint64{"aaa": 1}},
			path:          "stringToFixed64.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFixed64", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/fixed64/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Fixed64: 1}}},
			path:     "stringToMessage.aaa.fixed64",
			want:     uint64(1),
			wantSelf: &protopatchv1.TestMessage{Fixed64: 1},
		},
		{
			name:          "string-to-message-map/item/fixed64/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Fixed64: 1}}},
			path:          "stringToMessage.aaa.fixed64.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.fixed64", protopatch.ErrAccessToNonContainer),
		},

		// float
		{
			name:     "float/get",
			given:    &protopatchv1.TestMessage{Float: 1},
			path:     "float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestMessage{Float: 1},
		},
		{
			name:          "float/access",
			given:         &protopatchv1.TestMessage{Float: 1},
			path:          "float.unknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/float/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "float",
			want:           float32(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/float/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "float.unknown",
			wantAccessErr:        protopatch.NewErrInPath("float", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/float/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Float: 1}},
			path:     "message.float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestMessage{Float: 1},
		},
		{
			name:          "message/float/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Float: 1}},
			path:          "message.float.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/float/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.float",
			want:               float32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/float/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.float.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-float/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Float{Float: 1}},
			path:     "float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Float{Float: 1}},
		},
		{
			name:          "oneof/set-float/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Float{Float: 1}},
			path:          "float.unknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-float/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Float{Float: 0}},
			path:               "float",
			want:               float32(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-float/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Float{Float: 0}},
			path:               "float.unknown",
			wantAccessErr:      protopatch.NewErrInPath("float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/float/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Float: 1}}},
			path:     "message.float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestMessage{Float: 1},
		},
		{
			name:          "oneof/set-message/float/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Float: 1}}},
			path:          "message.float.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/float/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Float: 0}}},
			path:               "message.float",
			want:               float32(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Float: 0},
		},
		{
			name:               "oneof/unset-message/float/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Float: 0}}},
			path:               "message.float.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "float-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "float",
			want:     []float32{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/float-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "float",
			want:           []float32{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "float-list/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float",
			want:     []float32{1},
			wantSelf: &protopatchv1.TestList{Float: []float32{1}},
		},
		{
			name:     "float-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "float.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []float32{},
		},
		{
			name:          "float-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "float.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/float-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "float",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []float32{},
		},
		{
			name:                 "nil-base/float-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "float",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "float-list/item/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float.0",
			want:     float32(1),
			wantSelf: []float32{1},
		},
		{
			name:          "float-list/item/access",
			given:         &protopatchv1.TestList{Float: []float32{1}},
			path:          "float.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("float.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "float-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float.-1",
			want:     float32(1),
			wantSelf: []float32{1},
		},
		{
			name:          "float-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Float: []float32{1}},
			path:          "float.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("float.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "float-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []float32{1},
		},
		{
			name:          "float-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Float: []float32{1}},
			path:          "float..unknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "float-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []float32{1},
		},
		{
			name:          "float-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Float: []float32{1}},
			path:          "float.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "float-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Float: []float32{1}},
			path:     "float.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []float32{1},
		},
		{
			name:          "float-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Float: []float32{1}},
			path:          "float.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("float", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/float/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Float: 1}}},
			path:     "message.0.float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestMessage{Float: 1},
		},
		{
			name:          "message-list/item/float/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Float: 1}}},
			path:          "message.0.float.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.float", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-float-map/get",
			given:    &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:     "stringToFloat",
			want:     map[string]float32{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
		},
		{
			name:     "string-to-float-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToFloat.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]float32{},
		},
		{
			name:          "string-to-float-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToFloat.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFloat", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-float-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToFloat",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]float32{},
		},
		{
			name:                 "nil-base/string-to-float-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToFloat",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-float-map/item/get",
			given:    &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:     "stringToFloat.aaa",
			want:     float32(1),
			wantSelf: map[string]float32{"aaa": 1},
		},
		{
			name:          "string-to-float-map/item/access",
			given:         &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:          "stringToFloat.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFloat.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-float-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:     "stringToFloat.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]float32{"aaa": 1},
		},
		{
			name:          "string-to-float-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:          "stringToFloat..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFloat", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-float-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:     "stringToFloat.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]float32{"aaa": 1},
		},
		{
			name:          "string-to-float-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToFloat: map[string]float32{"aaa": 1}},
			path:          "stringToFloat.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToFloat", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/float/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Float: 1}}},
			path:     "stringToMessage.aaa.float",
			want:     float32(1),
			wantSelf: &protopatchv1.TestMessage{Float: 1},
		},
		{
			name:          "string-to-message-map/item/float/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Float: 1}}},
			path:          "stringToMessage.aaa.float.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.float", protopatch.ErrAccessToNonContainer),
		},

		// double
		{
			name:     "double/get",
			given:    &protopatchv1.TestMessage{Double: 1},
			path:     "double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestMessage{Double: 1},
		},
		{
			name:          "double/access",
			given:         &protopatchv1.TestMessage{Double: 1},
			path:          "double.unknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/double/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "double",
			want:           float64(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/double/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "double.unknown",
			wantAccessErr:        protopatch.NewErrInPath("double", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/double/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Double: 1}},
			path:     "message.double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestMessage{Double: 1},
		},
		{
			name:          "message/double/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Double: 1}},
			path:          "message.double.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/double/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.double",
			want:               float64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/double/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.double.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-double/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Double{Double: 1}},
			path:     "double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Double{Double: 1}},
		},
		{
			name:          "oneof/set-double/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Double{Double: 1}},
			path:          "double.unknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-double/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Double{Double: 0}},
			path:               "double",
			want:               float64(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-double/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Double{Double: 0}},
			path:               "double.unknown",
			wantAccessErr:      protopatch.NewErrInPath("double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/double/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Double: 1}}},
			path:     "message.double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestMessage{Double: 1},
		},
		{
			name:          "oneof/set-message/double/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Double: 1}}},
			path:          "message.double.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/double/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Double: 0}}},
			path:               "message.double",
			want:               float64(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Double: 0},
		},
		{
			name:               "oneof/unset-message/double/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Double: 0}}},
			path:               "message.double.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "double-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "double",
			want:     []float64{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/double-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "double",
			want:           []float64{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "double-list/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double",
			want:     []float64{1},
			wantSelf: &protopatchv1.TestList{Double: []float64{1}},
		},
		{
			name:     "double-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "double.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []float64{},
		},
		{
			name:          "double-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "double.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/double-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "double",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []float64{},
		},
		{
			name:                 "nil-base/double-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "double",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "double-list/item/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double.0",
			want:     float64(1),
			wantSelf: []float64{1},
		},
		{
			name:          "double-list/item/access",
			given:         &protopatchv1.TestList{Double: []float64{1}},
			path:          "double.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("double.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "double-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double.-1",
			want:     float64(1),
			wantSelf: []float64{1},
		},
		{
			name:          "double-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Double: []float64{1}},
			path:          "double.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("double.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "double-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []float64{1},
		},
		{
			name:          "double-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Double: []float64{1}},
			path:          "double..unknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "double-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []float64{1},
		},
		{
			name:          "double-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Double: []float64{1}},
			path:          "double.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "double-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Double: []float64{1}},
			path:     "double.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []float64{1},
		},
		{
			name:          "double-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Double: []float64{1}},
			path:          "double.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("double", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/double/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Double: 1}}},
			path:     "message.0.double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestMessage{Double: 1},
		},
		{
			name:          "message-list/item/double/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Double: 1}}},
			path:          "message.0.double.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.double", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-double-map/get",
			given:    &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:     "stringToDouble",
			want:     map[string]float64{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
		},
		{
			name:     "string-to-double-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToDouble.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]float64{},
		},
		{
			name:          "string-to-double-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToDouble.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToDouble", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-double-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToDouble",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]float64{},
		},
		{
			name:                 "nil-base/string-to-double-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToDouble",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-double-map/item/get",
			given:    &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:     "stringToDouble.aaa",
			want:     float64(1),
			wantSelf: map[string]float64{"aaa": 1},
		},
		{
			name:          "string-to-double-map/item/access",
			given:         &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:          "stringToDouble.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToDouble.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-double-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:     "stringToDouble.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]float64{"aaa": 1},
		},
		{
			name:          "string-to-double-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:          "stringToDouble..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToDouble", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-double-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:     "stringToDouble.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]float64{"aaa": 1},
		},
		{
			name:          "string-to-double-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToDouble: map[string]float64{"aaa": 1}},
			path:          "stringToDouble.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToDouble", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/double/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Double: 1}}},
			path:     "stringToMessage.aaa.double",
			want:     float64(1),
			wantSelf: &protopatchv1.TestMessage{Double: 1},
		},
		{
			name:          "string-to-message-map/item/double/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Double: 1}}},
			path:          "stringToMessage.aaa.double.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.double", protopatch.ErrAccessToNonContainer),
		},

		// string
		{
			name:     "string/get",
			given:    &protopatchv1.TestMessage{String_: "aaa"},
			path:     "string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestMessage{String_: "aaa"},
		},
		{
			name:          "string/access",
			given:         &protopatchv1.TestMessage{String_: "aaa"},
			path:          "string.unknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/string/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "string",
			want:           "",
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/string/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "string.unknown",
			wantAccessErr:        protopatch.NewErrInPath("string", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/string/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "aaa"}},
			path:     "message.string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestMessage{String_: "aaa"},
		},
		{
			name:          "message/string/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "aaa"}},
			path:          "message.string.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/string/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.string",
			want:               "",
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/string/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.string.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-string/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_String_{String_: "aaa"}},
			path:     "string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_String_{String_: "aaa"}},
		},
		{
			name:          "oneof/set-string/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_String_{String_: "aaa"}},
			path:          "string.unknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-string/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_String_{String_: ""}},
			path:               "string",
			want:               "",
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-string/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_String_{String_: ""}},
			path:               "string.unknown",
			wantAccessErr:      protopatch.NewErrInPath("string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/string/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "aaa"}}},
			path:     "message.string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestMessage{String_: "aaa"},
		},
		{
			name:          "oneof/set-message/string/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "aaa"}}},
			path:          "message.string.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/string/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: ""}}},
			path:               "message.string",
			want:               "",
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{String_: ""},
		},
		{
			name:               "oneof/unset-message/string/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: ""}}},
			path:               "message.string.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "string",
			want:     []string{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/string-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "string",
			want:           []string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "string-list/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string",
			want:     []string{"aaa"},
			wantSelf: &protopatchv1.TestList{String_: []string{"aaa"}},
		},
		{
			name:     "string-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "string.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []string{},
		},
		{
			name:          "string-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "string.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/string-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "string",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []string{},
		},
		{
			name:                 "nil-base/string-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "string",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-list/item/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string.0",
			want:     "aaa",
			wantSelf: []string{"aaa"},
		},
		{
			name:          "string-list/item/access",
			given:         &protopatchv1.TestList{String_: []string{"aaa"}},
			path:          "string.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("string.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-list/negative-index-item/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string.-1",
			want:     "aaa",
			wantSelf: []string{"aaa"},
		},
		{
			name:          "string-list/negative-index-item/access",
			given:         &protopatchv1.TestList{String_: []string{"aaa"}},
			path:          "string.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("string.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-list/empty-index-item/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []string{"aaa"},
		},
		{
			name:          "string-list/empty-index-item/access",
			given:         &protopatchv1.TestList{String_: []string{"aaa"}},
			path:          "string..unknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "string-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []string{"aaa"},
		},
		{
			name:          "string-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{String_: []string{"aaa"}},
			path:          "string.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "string-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{String_: []string{"aaa"}},
			path:     "string.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []string{"aaa"},
		},
		{
			name:          "string-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{String_: []string{"aaa"}},
			path:          "string.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("string", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/string/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "aaa"}}},
			path:     "message.0.string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestMessage{String_: "aaa"},
		},
		{
			name:          "message-list/item/string/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "aaa"}}},
			path:          "message.0.string.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.string", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-string-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToString",
			want:     map[string]string{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/string-to-string-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "stringToString",
			want:           map[string]string{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "string-to-string-map/get",
			given:    &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:     "stringToString",
			want:     map[string]string{"key": "aaa"},
			wantSelf: &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
		},
		{
			name:     "string-to-string-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]string{},
		},
		{
			name:          "string-to-string-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/string-to-string-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToString",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]string{},
		},
		{
			name:                 "nil-base/string-to-string-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToString",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-string-map/item/get",
			given:    &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:     "stringToString.key",
			want:     "aaa",
			wantSelf: map[string]string{"key": "aaa"},
		},
		{
			name:          "string-to-string-map/item/access",
			given:         &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:          "stringToString.key.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToString.key", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-string-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:     "stringToString.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]string{"key": "aaa"},
		},
		{
			name:          "string-to-string-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:          "stringToString..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToString", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-string-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:     "stringToString.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]string{"key": "aaa"},
		},
		{
			name:          "string-to-string-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToString: map[string]string{"key": "aaa"}},
			path:          "stringToString.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToString", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/string/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"key": {String_: "aaa"}}},
			path:     "stringToMessage.key.string",
			want:     "aaa",
			wantSelf: &protopatchv1.TestMessage{String_: "aaa"},
		},
		{
			name:          "string-to-message-map/item/string/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"key": {String_: "aaa"}}},
			path:          "stringToMessage.key.string.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.key.string", protopatch.ErrAccessToNonContainer),
		},

		// bytes
		{
			name:     "bytes/get",
			given:    &protopatchv1.TestMessage{Bytes: []byte("aaa")},
			path:     "bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestMessage{Bytes: []byte("aaa")},
		},
		{
			name:          "bytes/access",
			given:         &protopatchv1.TestMessage{Bytes: []byte("aaa")},
			path:          "bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/bytes/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "bytes",
			want:           []byte(nil),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/bytes/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "bytes.unknown",
			wantAccessErr:        protopatch.NewErrInPath("bytes", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/bytes/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Bytes: []byte("aaa")}},
			path:     "message.bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestMessage{Bytes: []byte("aaa")},
		},
		{
			name:          "message/bytes/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Bytes: []byte("aaa")}},
			path:          "message.bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/bytes/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.bytes",
			want:               []byte(nil),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/bytes/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.bytes.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-bytes/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bytes{Bytes: []byte("aaa")}},
			path:     "bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bytes{Bytes: []byte("aaa")}},
		},
		{
			name:          "oneof/set-bytes/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bytes{Bytes: []byte("aaa")}},
			path:          "bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-bytes/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bytes{Bytes: []byte(nil)}},
			path:               "bytes",
			want:               []byte(nil),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-bytes/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Bytes{Bytes: []byte(nil)}},
			path:               "bytes.unknown",
			wantAccessErr:      protopatch.NewErrInPath("bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/bytes/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bytes: []byte("aaa")}}},
			path:     "message.bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestMessage{Bytes: []byte("aaa")},
		},
		{
			name:          "oneof/set-message/bytes/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bytes: []byte("aaa")}}},
			path:          "message.bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/bytes/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bytes: []byte(nil)}}},
			path:               "message.bytes",
			want:               []byte(nil),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Bytes: []byte(nil)},
		},
		{
			name:               "oneof/unset-message/bytes/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Bytes: []byte(nil)}}},
			path:               "message.bytes.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bytes-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "bytes",
			want:     [][]byte{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/bytes-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "bytes",
			want:           [][]byte{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "bytes-list/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes",
			want:     [][]byte{[]byte("aaa")},
			wantSelf: &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
		},
		{
			name:     "bytes-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "bytes.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: [][]byte{},
		},
		{
			name:          "bytes-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "bytes.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/bytes-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "bytes",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        [][]byte{},
		},
		{
			name:                 "nil-base/bytes-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "bytes",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "bytes-list/item/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes.0",
			want:     []byte("aaa"),
			wantSelf: [][]byte{[]byte("aaa")},
		},
		{
			name:          "bytes-list/item/access",
			given:         &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:          "bytes.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bytes-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes.-1",
			want:     []byte("aaa"),
			wantSelf: [][]byte{[]byte("aaa")},
		},
		{
			name:          "bytes-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:          "bytes.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "bytes-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: [][]byte{[]byte("aaa")},
		},
		{
			name:          "bytes-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:          "bytes..unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "bytes-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: [][]byte{[]byte("aaa")},
		},
		{
			name:          "bytes-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:          "bytes.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "bytes-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:     "bytes.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: [][]byte{[]byte("aaa")},
		},
		{
			name:          "bytes-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Bytes: [][]byte{[]byte("aaa")}},
			path:          "bytes.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("bytes", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/bytes/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Bytes: []byte("aaa")}}},
			path:     "message.0.bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestMessage{Bytes: []byte("aaa")},
		},
		{
			name:          "message-list/item/bytes/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Bytes: []byte("aaa")}}},
			path:          "message.0.bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.bytes", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-bytes-map-empty/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToBytes",
			want:     map[string][]byte{},
			wantSelf: &protopatchv1.TestMap{},
		},
		{
			name:           "nil-base/string-to-bytes-map-empty/get",
			given:          (*protopatchv1.TestMap)(nil),
			path:           "stringToBytes",
			want:           map[string][]byte{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMap)(nil),
		},
		{
			name:     "string-to-bytes-map/get",
			given:    &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:     "stringToBytes",
			want:     map[string][]byte{"key": []byte("aaa")},
			wantSelf: &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
		},
		{
			name:     "string-to-bytes-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToBytes.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string][]byte{},
		},
		{
			name:          "string-to-bytes-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToBytes.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBytes", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
			wantSelf:      &protopatchv1.TestMap{},
		},
		{
			name:            "nil-base/string-to-bytes-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToBytes",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string][]byte{},
		},
		{
			name:                 "nil-base/string-to-bytes-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToBytes",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-bytes-map/item/get",
			given:    &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:     "stringToBytes.key",
			want:     []byte("aaa"),
			wantSelf: map[string][]byte{"key": []byte("aaa")},
		},
		{
			name:          "string-to-bytes-map/item/access",
			given:         &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:          "stringToBytes.key.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBytes.key", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-bytes-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:     "stringToBytes.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string][]byte{"key": []byte("aaa")},
		},
		{
			name:          "string-to-bytes-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:          "stringToBytes..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBytes", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-bytes-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:     "stringToBytes.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string][]byte{"key": []byte("aaa")},
		},
		{
			name:          "string-to-bytes-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToBytes: map[string][]byte{"key": []byte("aaa")}},
			path:          "stringToBytes.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToBytes", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/bytes/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"key": {Bytes: []byte("aaa")}}},
			path:     "stringToMessage.key.bytes",
			want:     []byte("aaa"),
			wantSelf: &protopatchv1.TestMessage{Bytes: []byte("aaa")},
		},
		{
			name:          "string-to-message-map/item/bytes/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"key": {Bytes: []byte("aaa")}}},
			path:          "stringToMessage.key.bytes.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.key.bytes", protopatch.ErrAccessToNonContainer),
		},

		// enum
		{
			name:     "enum/get",
			given:    &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
			path:     "enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
		},
		{
			name:          "enum/access",
			given:         &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
			path:          "enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:           "nil-base/enum/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "enum",
			want:           protoreflect.EnumNumber(0),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/enum/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "enum.unknown",
			wantAccessErr:        protopatch.NewErrInPath("enum", protopatch.ErrAccessToNonContainer),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message/enum/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "message.enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
		},
		{
			name:          "message/enum/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:          "message.enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "nil-message/enum/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.enum",
			want:               protoreflect.EnumNumber(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/enum/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.enum.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-enum/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Enum{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Enum{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}},
		},
		{
			name:          "oneof/set-enum/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Enum{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:          "enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-enum/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Enum{Enum: protopatchv1.Enum_ENUM_VALUE_UNSPECIFIED}},
			path:               "enum",
			want:               protoreflect.EnumNumber(0),
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-enum/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Enum{Enum: protopatchv1.Enum_ENUM_VALUE_UNSPECIFIED}},
			path:               "enum.unknown",
			wantAccessErr:      protopatch.NewErrInPath("enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "oneof/set-message/enum/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:     "message.enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
		},
		{
			name:          "oneof/set-message/enum/access",
			given:         &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:          "message.enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:               "oneof/unset-message/enum/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_UNSPECIFIED}}},
			path:               "message.enum",
			want:               protoreflect.EnumNumber(0),
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_UNSPECIFIED},
		},
		{
			name:               "oneof/unset-message/enum/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_UNSPECIFIED}}},
			path:               "message.enum.unknown",
			wantAccessErr:      protopatch.NewErrInPath("message.enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "enum-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "enum",
			want:     []protoreflect.EnumNumber{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/enum-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "enum",
			want:           []protoreflect.EnumNumber{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "enum-list/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum",
			want:     []protoreflect.EnumNumber{1},
			wantSelf: &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
		},
		{
			name:     "enum-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "enum.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []protoreflect.EnumNumber{},
		},
		{
			name:          "enum-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "enum.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/enum-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "enum",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []protoreflect.EnumNumber{},
		},
		{
			name:                 "nil-base/enum-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "enum",
			path:                 "0.unknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "enum-list/item/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum.0",
			want:     protoreflect.EnumNumber(1),
			wantSelf: []protoreflect.EnumNumber{1},
		},
		{
			name:          "enum-list/item/access",
			given:         &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:          "enum.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum.0", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "enum-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum.-1",
			want:     protoreflect.EnumNumber(1),
			wantSelf: []protoreflect.EnumNumber{1},
		},
		{
			name:          "enum-list/negative-index-item/access",
			given:         &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:          "enum.-1.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum.-1", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "enum-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []protoreflect.EnumNumber{1},
		},
		{
			name:          "enum-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:          "enum..unknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "enum-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []protoreflect.EnumNumber{1},
		},
		{
			name:          "enum-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:          "enum.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "enum-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:     "enum.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []protoreflect.EnumNumber{1},
		},
		{
			name:          "enum-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Enum: []protopatchv1.Enum{1}},
			path:          "enum.1.unknown",
			wantAccessErr: protopatch.NewErrInPath("enum", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/enum/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:     "message.0.enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
		},
		{
			name:          "message-list/item/enum/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:          "message.0.enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("message.0.enum", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-enum-map/get",
			given:    &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "stringToEnum",
			want:     map[string]protoreflect.EnumNumber{"aaa": 1},
			wantSelf: &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
		},
		{
			name:     "string-to-enum-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToEnum.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]protoreflect.EnumNumber{},
		},
		{
			name:          "string-to-enum-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToEnum.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToEnum", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-enum-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToEnum",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]protoreflect.EnumNumber{},
		},
		{
			name:                 "nil-base/string-to-enum-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToEnum",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.otherUnknown",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-enum-map/item/get",
			given:    &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "stringToEnum.aaa",
			want:     protoreflect.EnumNumber(1),
			wantSelf: map[string]protoreflect.EnumNumber{"aaa": 1},
		},
		{
			name:          "string-to-enum-map/item/access",
			given:         &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:          "stringToEnum.aaa.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToEnum.aaa", protopatch.ErrAccessToNonContainer),
		},
		{
			name:     "string-to-enum-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "stringToEnum.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]protoreflect.EnumNumber{"aaa": 1},
		},
		{
			name:          "string-to-enum-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:          "stringToEnum..unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToEnum", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-enum-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:     "stringToEnum.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]protoreflect.EnumNumber{"aaa": 1},
		},
		{
			name:          "string-to-enum-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToEnum: map[string]protopatchv1.Enum{"aaa": protopatchv1.Enum_ENUM_VALUE_OTHER}},
			path:          "stringToEnum.unknown.otherUnknown",
			wantAccessErr: protopatch.NewErrInPath("stringToEnum", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/enum/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:     "stringToMessage.aaa.enum",
			want:     protoreflect.EnumNumber(1),
			wantSelf: &protopatchv1.TestMessage{Enum: protopatchv1.Enum_ENUM_VALUE_OTHER},
		},
		{
			name:          "string-to-message-map/item/enum/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Enum: protopatchv1.Enum_ENUM_VALUE_OTHER}}},
			path:          "stringToMessage.aaa.enum.unknown",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage.aaa.enum", protopatch.ErrAccessToNonContainer),
		},

		// message
		{
			name:               "base/access",
			given:              &protopatchv1.TestMessage{String_: "zzz"},
			givenAfterMutation: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}},
			path:               "message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:           "nil-base/access",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "message",
			want:           (*protopatchv1.TestMessage)(nil),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:     "message/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
			path:     "message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "message/access",
			given:              &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}},
			path:               "message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:           "nil-base/message/get",
			given:          (*protopatchv1.TestMessage)(nil),
			path:           "message",
			want:           (*protopatchv1.TestMessage)(nil),
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestMessage)(nil),
		},
		{
			name:                 "nil-base/message/access",
			given:                (*protopatchv1.TestMessage)(nil),
			path:                 "message.message",
			want:                 (*protopatchv1.TestMessage)(nil),
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:             (*protopatchv1.TestMessage)(nil),
		},
		{
			name:     "message/message/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:     "message.message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "message/message/access",
			given:              &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}}},
			path:               "message.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:     "message/empty/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:     "message.",
			wantErr:  protopatch.ErrNotFound{Kind: "field", Value: ""},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "message/empty/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:          "message..message",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "field", Value: ""}),
		},
		{
			name:     "message/unknown/get",
			given:    &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:     "message.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "field", Value: "unknown"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "message/unknown/access",
			given:         &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:          "message.unknown.message",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "field", Value: "unknown"}),
		},
		{
			name:               "nil-message/message/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}}},
			path:               "message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/message/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}}}},
			path:               "message.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/empty/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.",
			wantErr:            protopatch.ErrNotFound{Kind: "field", Value: ""},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/empty/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message..message",
			wantAccessErr:      protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "field", Value: ""}),
		},
		{
			name:               "nil-message/unknown/get",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.unknown",
			wantErr:            protopatch.ErrNotFound{Kind: "field", Value: "unknown"},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "nil-message/unknown/access",
			given:              &protopatchv1.TestMessage{},
			givenAfterMutation: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}},
			path:               "message.unknown.message",
			wantAccessErr:      protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "field", Value: "unknown"}),
		},
		{
			name:     "oneof/set-message/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			path:     "message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
		},
		{
			name:               "oneof/set-message/access",
			given:              &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "zzz"}}},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}}},
			path:               "message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:               "oneof/unset-message/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{}}},
			path:               "message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestOneof{},
		},
		{
			name:               "oneof/unset-message/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}}}},
			path:               "message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:     "oneof/set-message/message/get",
			given:    &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			path:     "message.message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "oneof/set-message/message/access",
			given:              &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}}}},
			path:               "message.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:               "oneof/unset-message/message/get",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}}}},
			path:               "message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:               "oneof/unset-message/message/access",
			given:              &protopatchv1.TestOneof{},
			givenAfterMutation: &protopatchv1.TestOneof{Types: &protopatchv1.TestOneof_Message{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{}}}}},
			path:               "message.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           (*protopatchv1.TestMessage)(nil),
			wantSelfMutable:    &protopatchv1.TestMessage{},
		},
		{
			name:     "message-list-empty/get",
			given:    &protopatchv1.TestList{},
			path:     "message",
			want:     []proto.Message{},
			wantSelf: &protopatchv1.TestList{},
		},
		{
			name:           "nil-base/message-list-empty/get",
			given:          (*protopatchv1.TestList)(nil),
			path:           "message",
			want:           []proto.Message{},
			wantMutableErr: protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:       (*protopatchv1.TestList)(nil),
		},
		{
			name:     "message-list/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message",
			want:     []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
			wantSelf: &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
		},
		{
			name:     "message-list-empty/unknown-item/get",
			given:    &protopatchv1.TestList{},
			path:     "message.0",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantSelf: []proto.Message{},
		},
		{
			name:          "message-list-empty/unknown-item/access",
			given:         &protopatchv1.TestList{},
			path:          "message.0.unknown",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "index", Value: "0"}),
		},
		{
			name:            "nil-base/message-list-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestList)(nil),
			readOnlyPrePath: "message",
			path:            "0",
			wantErr:         protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        []proto.Message{},
		},
		{
			name:                 "nil-base/message-list-empty/preAccess/unknown-item/access",
			given:                (*protopatchv1.TestList)(nil),
			readOnlyPrePath:      "message",
			path:                 "0.message",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "index", Value: "0"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "message-list/item/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message.0",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "message-list/item/access",
			given:              &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			givenAfterMutation: &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz", Message: &protopatchv1.TestMessage{}}}},
			path:               "message.0.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:     "message-list/negative-index-item/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message.-1",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "message-list/negative-index-item/access",
			given:              &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			givenAfterMutation: &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz", Message: &protopatchv1.TestMessage{}}}},
			path:               "message.-1.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:     "message-list/empty-index-item/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message.",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: ""},
			wantSelf: []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "message-list/empty-index-item/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:          "message..message",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "index", Value: ""}),
		},
		{
			name:     "message-list/invalid-index-item/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "unknown"},
			wantSelf: []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "message-list/invalid-index-item/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:          "message.unknown.message",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "index", Value: "unknown"}),
		},
		{
			name:     "message-list/unknown-index-item/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:     "message.1",
			wantErr:  protopatch.ErrNotFound{Kind: "index", Value: "1"},
			wantSelf: []proto.Message{&protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "message-list/unknown-index-item/access",
			given:         &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{String_: "zzz"}}},
			path:          "message.1.unknown.message",
			wantAccessErr: protopatch.NewErrInPath("message", protopatch.ErrNotFound{Kind: "index", Value: "1"}),
		},
		{
			name:     "message-list/item/message/get",
			given:    &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			path:     "message.0.message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "message-list/item/message/access",
			given:              &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			givenAfterMutation: &protopatchv1.TestList{Message: []*protopatchv1.TestMessage{{Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}}}},
			path:               "message.0.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:     "string-to-message-map/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:     "stringToMessage",
			want:     map[string]proto.Message{"aaa": &protopatchv1.TestMessage{String_: "zzz"}},
			wantSelf: &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
		},
		{
			name:     "string-to-message-map-empty/unknown-item/get",
			given:    &protopatchv1.TestMap{},
			path:     "stringToMessage.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]proto.Message{},
		},
		{
			name:          "string-to-message-map-empty/unknown-item/self/get",
			given:         &protopatchv1.TestMap{},
			path:          "stringToMessage.unknown.",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:          "string-to-message-map-empty/unknown-item/access",
			given:         &protopatchv1.TestMap{},
			path:          "stringToMessage.unknown.message",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:            "nil-base/string-to-message-map-empty/preAccess/unknown-item/get",
			given:           (*protopatchv1.TestMap)(nil),
			readOnlyPrePath: "stringToMessage",
			path:            "unknown",
			wantErr:         protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantMutableErr:  protopatch.ErrMutationOfReadOnlyValue,
			wantSelf:        map[string]proto.Message{},
		},
		{
			name:                 "nil-base/string-to-message-map-empty/preAccess/unknown-item/self/get",
			given:                (*protopatchv1.TestMap)(nil),
			readOnlyPrePath:      "stringToMessage",
			path:                 "unknown.",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:                 "nil-base/string-to-message-map-empty/preAccess/unknown-item/access",
			readOnlyPrePath:      "stringToMessage",
			given:                (*protopatchv1.TestMap)(nil),
			path:                 "unknown.message",
			wantAccessErr:        protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantAccessMutableErr: protopatch.ErrMutationOfReadOnlyValue,
		},
		{
			name:     "string-to-message-map/item/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:     "stringToMessage.aaa",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: map[string]proto.Message{"aaa": &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "string-to-message-map/item/access",
			given:              &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			givenAfterMutation: &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz", Message: &protopatchv1.TestMessage{}}}},
			path:               "stringToMessage.aaa.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},
		{
			name:     "string-to-message-map/empty-key-item/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:     "stringToMessage.",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: ""},
			wantSelf: map[string]proto.Message{"aaa": &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "string-to-message-map/empty-key-item/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:          "stringToMessage..message",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage", protopatch.ErrNotFound{Kind: "key", Value: ""}),
		},
		{
			name:     "string-to-message-map/unknown-key-item/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:     "stringToMessage.unknown",
			wantErr:  protopatch.ErrNotFound{Kind: "key", Value: "unknown"},
			wantSelf: map[string]proto.Message{"aaa": &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:          "string-to-message-map/unknown-key-item/access",
			given:         &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {String_: "zzz"}}},
			path:          "stringToMessage.unknown.message",
			wantAccessErr: protopatch.NewErrInPath("stringToMessage", protopatch.ErrNotFound{Kind: "key", Value: "unknown"}),
		},
		{
			name:     "string-to-message-map/item/message/get",
			given:    &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			path:     "stringToMessage.aaa.message",
			want:     &protopatchv1.TestMessage{String_: "zzz"},
			wantSelf: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		},
		{
			name:               "string-to-message-map/item/message/access",
			given:              &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Message: &protopatchv1.TestMessage{String_: "zzz"}}}},
			givenAfterMutation: &protopatchv1.TestMap{StringToMessage: map[string]*protopatchv1.TestMessage{"aaa": {Message: &protopatchv1.TestMessage{String_: "zzz", Message: &protopatchv1.TestMessage{}}}}},
			path:               "stringToMessage.aaa.message.message",
			want:               (*protopatchv1.TestMessage)(nil),
			wantMutable:        &protopatchv1.TestMessage{},
			wantSelf:           &protopatchv1.TestMessage{String_: "zzz"},
		},

		// {
		// 	name:  "non-nested",
		// 	given: &protopatchv1.TestMessage{String_: "zzz"},
		// 	path:  "string",
		// 	want:  "aaa",
		// },
		// {
		// 	name:  "nested-once",
		// 	given: &protopatchv1.TestMessage{Message: &protopatchv1.TestMessage{String_: "zzz"}},
		// 	path:  "message",
		// 	want:  &protopatchv1.TestMessage{String_: "zzz"},
		// },
		// {
		// 	name:  "list",
		// 	given: &protopatchv1.TestList{String_: []string{"aaa"}},
		// 	path:  "string",
		// 	want:  []string{"aaa"},
		// },
		// {
		// 	name:  "nested-list",
		// 	given: &protopatchv1.TestMessage{List: &protopatchv1.TestList{String_: []string{"aaa"}}},
		// 	path:  "list.string",
		// 	want:  []string{"aaa"},
		// },

		// {
		// 	name:    "unknown-field-in-message",
		// 	given:   &protopatchv1.TestMessage{},
		// 	path:    "unknown",
		// 	wantErr: protopatch.ErrFieldNotFound{Field: "unknown"},
		// },
		// {
		// 	name:    "invalid-index-in-list",
		// 	given:   &protopatchv1.TestList{},
		// 	path:    "string.unknown",
		// 	wantErr: protopatch.ErrKeyNotFound{Key: "unknown"},
		// },
		// {
		// 	name:    "unknown-index-in-list",
		// 	given:   &protopatchv1.TestList{},
		// 	path:    "string.1",
		// 	wantErr: protopatch.ErrKeyNotFound{Index: "1"},
		// },
		// {
		// 	name:    "unknown-key-in-map",
		// 	given:   &protopatchv1.TestMap{},
		// 	path:    "stringToString.unknown",
		// 	wantErr: protopatch.ErrKeyNotFound{Key: "unknown"},
		// },
	}

	for _, test := range tests {
		if test.givenAfterMutation == nil {
			test.givenAfterMutation = proto.Clone(test.given)
		}
		if test.wantSelfMutable == nil {
			test.wantSelfMutable = test.wantSelf
		}
		if test.wantMutable == nil {
			test.wantMutable = test.want
		}
		if test.wantMutableErr == nil {
			test.wantMutableErr = test.wantErr
		}
		if test.wantAccessMutableErr == nil {
			test.wantAccessMutableErr = test.wantAccessErr
		}

		t.Run("read-only/"+test.name, func(t *testing.T) {
			t.Parallel()
			base := proto.Clone(test.given)
			c := protopatch.MessageContainer(base)

			// validate base has not been changed after access, as read-only operation should never modify the provided value
			defer patchtest.RequireEqual(t, test.given, base, "base modified after read-only access")

			if test.readOnlyPrePath != "" { // extra pre fetch for mutation failure tests
				preAccessed, err := protopatch.Access(c, protopatch.Path(test.readOnlyPrePath))
				require.NoError(t, err, "get pre access failure")
				c = preAccessed
			}

			path := protopatch.Path(test.path)
			if !path.Last().IsFirst() { // access until last element
				accessed, err := protopatch.Access(c, path.Last().PrecedingPath())
				if err != nil && test.wantAccessErr != nil {
					require.Equal(t, test.wantAccessErr, err)
					return
				}
				require.NoError(t, err)
				c = accessed
			}
			require.NoError(t, test.wantAccessErr, "missing access error")

			// validate self value
			patchtest.RequireEqual(t, test.wantSelf, c.Self(), "wrong self value after read only access")

			// get last element
			final, err := c.Get(path.Last().Value())
			if test.wantErr != nil {
				require.Equal(t, test.wantErr, err)
			} else {
				require.NoError(t, err)
				patchtest.RequireEqual(t, test.want, final, "Get method result mismatch")
			}
		})
		t.Run("mutable/"+test.name, func(t *testing.T) {
			t.Parallel()
			base := proto.Clone(test.given)
			c := protopatch.MessageContainer(base)

			// assert base after mutable access
			defer patchtest.RequireEqual(t, test.givenAfterMutation, base, "invalid base after mutable access")

			if test.readOnlyPrePath != "" { // extra pre fetch for mutation failure tests
				preAccessed, err := protopatch.Access(c, protopatch.Path(test.readOnlyPrePath))
				require.NoError(t, err, "get pre access failure")
				c = preAccessed
			}

			path := protopatch.Path(test.path)
			if !path.Last().IsFirst() { // access until last element
				accessed, err := protopatch.AccessMutable(c, path.Last().PrecedingPath())
				if err != nil && test.wantAccessMutableErr != nil {
					require.Equal(t, test.wantAccessMutableErr, err)
					return
				}
				require.NoError(t, err)
				c = accessed
			}
			require.NoError(t, test.wantAccessMutableErr, "missing access error")

			// validate self value
			patchtest.RequireEqual(t, test.wantSelfMutable, c.Self(), "wrong self value after mutable access")

			// get mutable value of the last element
			final, err := c.Mutable(path.Last().Value())
			if test.wantMutableErr != nil {
				require.Equal(t, test.wantMutableErr, err)
			} else {
				require.NoError(t, err)
				patchtest.RequireEqual(t, test.wantMutable, final, "Mutable method result mismatch")
			}
		})
	}
}
