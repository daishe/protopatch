// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: protopatch/v1/types.proto

package protopatchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ENUM_VALUE_UNSPECIFIED Enum = 0
	Enum_ENUM_VALUE_OTHER       Enum = 1
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "ENUM_VALUE_UNSPECIFIED",
		1: "ENUM_VALUE_OTHER",
	}
	Enum_value = map[string]int32{
		"ENUM_VALUE_UNSPECIFIED": 0,
		"ENUM_VALUE_OTHER":       1,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_protopatch_v1_types_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_protopatch_v1_types_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{0}
}

type TestMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bool          bool                   `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Int32         int32                  `protobuf:"varint,2,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32        int32                  `protobuf:"zigzag32,3,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32      int32                  `protobuf:"fixed32,4,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32        uint32                 `protobuf:"varint,5,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32       uint32                 `protobuf:"fixed32,6,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64         int64                  `protobuf:"varint,7,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64        int64                  `protobuf:"zigzag64,8,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64      int64                  `protobuf:"fixed64,9,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64        uint64                 `protobuf:"varint,10,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64       uint64                 `protobuf:"fixed64,11,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float         float32                `protobuf:"fixed32,12,opt,name=float,proto3" json:"float,omitempty"`
	Double        float64                `protobuf:"fixed64,13,opt,name=double,proto3" json:"double,omitempty"`
	String_       string                 `protobuf:"bytes,14,opt,name=string,proto3" json:"string,omitempty"`
	Bytes         []byte                 `protobuf:"bytes,15,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Enum          Enum                   `protobuf:"varint,16,opt,name=enum,proto3,enum=protopatch.v1.Enum" json:"enum,omitempty"`
	Message       *TestMessage           `protobuf:"bytes,17,opt,name=message,proto3" json:"message,omitempty"`
	Oneof         *TestOneof             `protobuf:"bytes,18,opt,name=oneof,proto3" json:"oneof,omitempty"`
	List          *TestList              `protobuf:"bytes,19,opt,name=list,proto3" json:"list,omitempty"`
	Map           *TestMap               `protobuf:"bytes,20,opt,name=map,proto3" json:"map,omitempty"`
	WellKnown     *TestWellKnown         `protobuf:"bytes,21,opt,name=well_known,json=wellKnown,proto3" json:"well_known,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_protopatch_v1_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protopatch_v1_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *TestMessage) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *TestMessage) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *TestMessage) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *TestMessage) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *TestMessage) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *TestMessage) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *TestMessage) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *TestMessage) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *TestMessage) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *TestMessage) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *TestMessage) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *TestMessage) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *TestMessage) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *TestMessage) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestMessage) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ENUM_VALUE_UNSPECIFIED
}

func (x *TestMessage) GetMessage() *TestMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *TestMessage) GetOneof() *TestOneof {
	if x != nil {
		return x.Oneof
	}
	return nil
}

func (x *TestMessage) GetList() *TestList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TestMessage) GetMap() *TestMap {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *TestMessage) GetWellKnown() *TestWellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

type TestOneof struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Types:
	//
	//	*TestOneof_Bool
	//	*TestOneof_Int32
	//	*TestOneof_Sint32
	//	*TestOneof_Sfixed32
	//	*TestOneof_Uint32
	//	*TestOneof_Fixed32
	//	*TestOneof_Int64
	//	*TestOneof_Sint64
	//	*TestOneof_Sfixed64
	//	*TestOneof_Uint64
	//	*TestOneof_Fixed64
	//	*TestOneof_Float
	//	*TestOneof_Double
	//	*TestOneof_String_
	//	*TestOneof_Bytes
	//	*TestOneof_Enum
	//	*TestOneof_Message
	Types isTestOneof_Types `protobuf_oneof:"types"`
	// Types that are valid to be assigned to SingleMessage:
	//
	//	*TestOneof_SingleMessage_0
	SingleMessage isTestOneof_SingleMessage `protobuf_oneof:"single_message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestOneof) Reset() {
	*x = TestOneof{}
	mi := &file_protopatch_v1_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestOneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOneof) ProtoMessage() {}

func (x *TestOneof) ProtoReflect() protoreflect.Message {
	mi := &file_protopatch_v1_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOneof.ProtoReflect.Descriptor instead.
func (*TestOneof) Descriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *TestOneof) GetTypes() isTestOneof_Types {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *TestOneof) GetBool() bool {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Bool); ok {
			return x.Bool
		}
	}
	return false
}

func (x *TestOneof) GetInt32() int32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Int32); ok {
			return x.Int32
		}
	}
	return 0
}

func (x *TestOneof) GetSint32() int32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Sint32); ok {
			return x.Sint32
		}
	}
	return 0
}

func (x *TestOneof) GetSfixed32() int32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return 0
}

func (x *TestOneof) GetUint32() uint32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Uint32); ok {
			return x.Uint32
		}
	}
	return 0
}

func (x *TestOneof) GetFixed32() uint32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Fixed32); ok {
			return x.Fixed32
		}
	}
	return 0
}

func (x *TestOneof) GetInt64() int64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Int64); ok {
			return x.Int64
		}
	}
	return 0
}

func (x *TestOneof) GetSint64() int64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Sint64); ok {
			return x.Sint64
		}
	}
	return 0
}

func (x *TestOneof) GetSfixed64() int64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return 0
}

func (x *TestOneof) GetUint64() uint64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Uint64); ok {
			return x.Uint64
		}
	}
	return 0
}

func (x *TestOneof) GetFixed64() uint64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Fixed64); ok {
			return x.Fixed64
		}
	}
	return 0
}

func (x *TestOneof) GetFloat() float32 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Float); ok {
			return x.Float
		}
	}
	return 0
}

func (x *TestOneof) GetDouble() float64 {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Double); ok {
			return x.Double
		}
	}
	return 0
}

func (x *TestOneof) GetString_() string {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_String_); ok {
			return x.String_
		}
	}
	return ""
}

func (x *TestOneof) GetBytes() []byte {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *TestOneof) GetEnum() Enum {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Enum); ok {
			return x.Enum
		}
	}
	return Enum_ENUM_VALUE_UNSPECIFIED
}

func (x *TestOneof) GetMessage() *TestMessage {
	if x != nil {
		if x, ok := x.Types.(*TestOneof_Message); ok {
			return x.Message
		}
	}
	return nil
}

func (x *TestOneof) GetSingleMessage() isTestOneof_SingleMessage {
	if x != nil {
		return x.SingleMessage
	}
	return nil
}

func (x *TestOneof) GetSingleMessage_0() *TestMessage {
	if x != nil {
		if x, ok := x.SingleMessage.(*TestOneof_SingleMessage_0); ok {
			return x.SingleMessage_0
		}
	}
	return nil
}

type isTestOneof_Types interface {
	isTestOneof_Types()
}

type TestOneof_Bool struct {
	Bool bool `protobuf:"varint,1,opt,name=bool,proto3,oneof"`
}

type TestOneof_Int32 struct {
	Int32 int32 `protobuf:"varint,2,opt,name=int32,proto3,oneof"`
}

type TestOneof_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,3,opt,name=sint32,proto3,oneof"`
}

type TestOneof_Sfixed32 struct {
	Sfixed32 int32 `protobuf:"fixed32,4,opt,name=sfixed32,proto3,oneof"`
}

type TestOneof_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,5,opt,name=uint32,proto3,oneof"`
}

type TestOneof_Fixed32 struct {
	Fixed32 uint32 `protobuf:"fixed32,6,opt,name=fixed32,proto3,oneof"`
}

type TestOneof_Int64 struct {
	Int64 int64 `protobuf:"varint,7,opt,name=int64,proto3,oneof"`
}

type TestOneof_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,8,opt,name=sint64,proto3,oneof"`
}

type TestOneof_Sfixed64 struct {
	Sfixed64 int64 `protobuf:"fixed64,9,opt,name=sfixed64,proto3,oneof"`
}

type TestOneof_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,10,opt,name=uint64,proto3,oneof"`
}

type TestOneof_Fixed64 struct {
	Fixed64 uint64 `protobuf:"fixed64,11,opt,name=fixed64,proto3,oneof"`
}

type TestOneof_Float struct {
	Float float32 `protobuf:"fixed32,12,opt,name=float,proto3,oneof"`
}

type TestOneof_Double struct {
	Double float64 `protobuf:"fixed64,13,opt,name=double,proto3,oneof"`
}

type TestOneof_String_ struct {
	String_ string `protobuf:"bytes,14,opt,name=string,proto3,oneof"`
}

type TestOneof_Bytes struct {
	Bytes []byte `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"`
}

type TestOneof_Enum struct {
	Enum Enum `protobuf:"varint,16,opt,name=enum,proto3,enum=protopatch.v1.Enum,oneof"`
}

type TestOneof_Message struct {
	Message *TestMessage `protobuf:"bytes,17,opt,name=message,proto3,oneof"`
}

func (*TestOneof_Bool) isTestOneof_Types() {}

func (*TestOneof_Int32) isTestOneof_Types() {}

func (*TestOneof_Sint32) isTestOneof_Types() {}

func (*TestOneof_Sfixed32) isTestOneof_Types() {}

func (*TestOneof_Uint32) isTestOneof_Types() {}

func (*TestOneof_Fixed32) isTestOneof_Types() {}

func (*TestOneof_Int64) isTestOneof_Types() {}

func (*TestOneof_Sint64) isTestOneof_Types() {}

func (*TestOneof_Sfixed64) isTestOneof_Types() {}

func (*TestOneof_Uint64) isTestOneof_Types() {}

func (*TestOneof_Fixed64) isTestOneof_Types() {}

func (*TestOneof_Float) isTestOneof_Types() {}

func (*TestOneof_Double) isTestOneof_Types() {}

func (*TestOneof_String_) isTestOneof_Types() {}

func (*TestOneof_Bytes) isTestOneof_Types() {}

func (*TestOneof_Enum) isTestOneof_Types() {}

func (*TestOneof_Message) isTestOneof_Types() {}

type isTestOneof_SingleMessage interface {
	isTestOneof_SingleMessage()
}

type TestOneof_SingleMessage_0 struct {
	SingleMessage_0 *TestMessage `protobuf:"bytes,101,opt,name=single_message_0,json=singleMessage0,proto3,oneof"`
}

func (*TestOneof_SingleMessage_0) isTestOneof_SingleMessage() {}

type TestList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bool          []bool                 `protobuf:"varint,1,rep,packed,name=bool,proto3" json:"bool,omitempty"`
	Int32         []int32                `protobuf:"varint,2,rep,packed,name=int32,proto3" json:"int32,omitempty"`
	Sint32        []int32                `protobuf:"zigzag32,3,rep,packed,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32      []int32                `protobuf:"fixed32,4,rep,packed,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Uint32        []uint32               `protobuf:"varint,5,rep,packed,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32       []uint32               `protobuf:"fixed32,6,rep,packed,name=fixed32,proto3" json:"fixed32,omitempty"`
	Int64         []int64                `protobuf:"varint,7,rep,packed,name=int64,proto3" json:"int64,omitempty"`
	Sint64        []int64                `protobuf:"zigzag64,8,rep,packed,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64      []int64                `protobuf:"fixed64,9,rep,packed,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Uint64        []uint64               `protobuf:"varint,10,rep,packed,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64       []uint64               `protobuf:"fixed64,11,rep,packed,name=fixed64,proto3" json:"fixed64,omitempty"`
	Float         []float32              `protobuf:"fixed32,12,rep,packed,name=float,proto3" json:"float,omitempty"`
	Double        []float64              `protobuf:"fixed64,13,rep,packed,name=double,proto3" json:"double,omitempty"`
	String_       []string               `protobuf:"bytes,14,rep,name=string,proto3" json:"string,omitempty"`
	Bytes         [][]byte               `protobuf:"bytes,15,rep,name=bytes,proto3" json:"bytes,omitempty"`
	Enum          []Enum                 `protobuf:"varint,16,rep,packed,name=enum,proto3,enum=protopatch.v1.Enum" json:"enum,omitempty"`
	Message       []*TestMessage         `protobuf:"bytes,17,rep,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestList) Reset() {
	*x = TestList{}
	mi := &file_protopatch_v1_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestList) ProtoMessage() {}

func (x *TestList) ProtoReflect() protoreflect.Message {
	mi := &file_protopatch_v1_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestList.ProtoReflect.Descriptor instead.
func (*TestList) Descriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *TestList) GetBool() []bool {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *TestList) GetInt32() []int32 {
	if x != nil {
		return x.Int32
	}
	return nil
}

func (x *TestList) GetSint32() []int32 {
	if x != nil {
		return x.Sint32
	}
	return nil
}

func (x *TestList) GetSfixed32() []int32 {
	if x != nil {
		return x.Sfixed32
	}
	return nil
}

func (x *TestList) GetUint32() []uint32 {
	if x != nil {
		return x.Uint32
	}
	return nil
}

func (x *TestList) GetFixed32() []uint32 {
	if x != nil {
		return x.Fixed32
	}
	return nil
}

func (x *TestList) GetInt64() []int64 {
	if x != nil {
		return x.Int64
	}
	return nil
}

func (x *TestList) GetSint64() []int64 {
	if x != nil {
		return x.Sint64
	}
	return nil
}

func (x *TestList) GetSfixed64() []int64 {
	if x != nil {
		return x.Sfixed64
	}
	return nil
}

func (x *TestList) GetUint64() []uint64 {
	if x != nil {
		return x.Uint64
	}
	return nil
}

func (x *TestList) GetFixed64() []uint64 {
	if x != nil {
		return x.Fixed64
	}
	return nil
}

func (x *TestList) GetFloat() []float32 {
	if x != nil {
		return x.Float
	}
	return nil
}

func (x *TestList) GetDouble() []float64 {
	if x != nil {
		return x.Double
	}
	return nil
}

func (x *TestList) GetString_() []string {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *TestList) GetBytes() [][]byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TestList) GetEnum() []Enum {
	if x != nil {
		return x.Enum
	}
	return nil
}

func (x *TestList) GetMessage() []*TestMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type TestMap struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	BoolToString     map[bool]string         `protobuf:"bytes,1,rep,name=bool_to_string,json=boolToString,proto3" json:"bool_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int32ToString    map[int32]string        `protobuf:"bytes,2,rep,name=int32_to_string,json=int32ToString,proto3" json:"int32_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint32ToString   map[int32]string        `protobuf:"bytes,3,rep,name=sint32_to_string,json=sint32ToString,proto3" json:"sint32_to_string,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed32ToString map[int32]string        `protobuf:"bytes,4,rep,name=sfixed32_to_string,json=sfixed32ToString,proto3" json:"sfixed32_to_string,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint32ToString   map[uint32]string       `protobuf:"bytes,5,rep,name=uint32_to_string,json=uint32ToString,proto3" json:"uint32_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed32ToString  map[uint32]string       `protobuf:"bytes,6,rep,name=fixed32_to_string,json=fixed32ToString,proto3" json:"fixed32_to_string,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int64ToString    map[int64]string        `protobuf:"bytes,7,rep,name=int64_to_string,json=int64ToString,proto3" json:"int64_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint64ToString   map[int64]string        `protobuf:"bytes,8,rep,name=sint64_to_string,json=sint64ToString,proto3" json:"sint64_to_string,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed64ToString map[int64]string        `protobuf:"bytes,9,rep,name=sfixed64_to_string,json=sfixed64ToString,proto3" json:"sfixed64_to_string,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint64ToString   map[uint64]string       `protobuf:"bytes,10,rep,name=uint64_to_string,json=uint64ToString,proto3" json:"uint64_to_string,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed64ToString  map[uint64]string       `protobuf:"bytes,11,rep,name=fixed64_to_string,json=fixed64ToString,proto3" json:"fixed64_to_string,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToString   map[string]string       `protobuf:"bytes,12,rep,name=string_to_string,json=stringToString,proto3" json:"string_to_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToBool     map[string]bool         `protobuf:"bytes,101,rep,name=string_to_bool,json=stringToBool,proto3" json:"string_to_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToInt32    map[string]int32        `protobuf:"bytes,102,rep,name=string_to_int32,json=stringToInt32,proto3" json:"string_to_int32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToSint32   map[string]int32        `protobuf:"bytes,103,rep,name=string_to_sint32,json=stringToSint32,proto3" json:"string_to_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	StringToSfixed32 map[string]int32        `protobuf:"bytes,104,rep,name=string_to_sfixed32,json=stringToSfixed32,proto3" json:"string_to_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToUint32   map[string]uint32       `protobuf:"bytes,105,rep,name=string_to_uint32,json=stringToUint32,proto3" json:"string_to_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToFixed32  map[string]uint32       `protobuf:"bytes,106,rep,name=string_to_fixed32,json=stringToFixed32,proto3" json:"string_to_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToInt64    map[string]int64        `protobuf:"bytes,107,rep,name=string_to_int64,json=stringToInt64,proto3" json:"string_to_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToSint64   map[string]int64        `protobuf:"bytes,108,rep,name=string_to_sint64,json=stringToSint64,proto3" json:"string_to_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	StringToSfixed64 map[string]int64        `protobuf:"bytes,109,rep,name=string_to_sfixed64,json=stringToSfixed64,proto3" json:"string_to_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToUint64   map[string]uint64       `protobuf:"bytes,110,rep,name=string_to_uint64,json=stringToUint64,proto3" json:"string_to_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringToFixed64  map[string]uint64       `protobuf:"bytes,111,rep,name=string_to_fixed64,json=stringToFixed64,proto3" json:"string_to_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToFloat    map[string]float32      `protobuf:"bytes,112,rep,name=string_to_float,json=stringToFloat,proto3" json:"string_to_float,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	StringToDouble   map[string]float64      `protobuf:"bytes,113,rep,name=string_to_double,json=stringToDouble,proto3" json:"string_to_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	StringToBytes    map[string][]byte       `protobuf:"bytes,114,rep,name=string_to_bytes,json=stringToBytes,proto3" json:"string_to_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToEnum     map[string]Enum         `protobuf:"bytes,115,rep,name=string_to_enum,json=stringToEnum,proto3" json:"string_to_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=protopatch.v1.Enum"`
	StringToMessage  map[string]*TestMessage `protobuf:"bytes,116,rep,name=string_to_message,json=stringToMessage,proto3" json:"string_to_message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TestMap) Reset() {
	*x = TestMap{}
	mi := &file_protopatch_v1_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMap) ProtoMessage() {}

func (x *TestMap) ProtoReflect() protoreflect.Message {
	mi := &file_protopatch_v1_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMap.ProtoReflect.Descriptor instead.
func (*TestMap) Descriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TestMap) GetBoolToString() map[bool]string {
	if x != nil {
		return x.BoolToString
	}
	return nil
}

func (x *TestMap) GetInt32ToString() map[int32]string {
	if x != nil {
		return x.Int32ToString
	}
	return nil
}

func (x *TestMap) GetSint32ToString() map[int32]string {
	if x != nil {
		return x.Sint32ToString
	}
	return nil
}

func (x *TestMap) GetSfixed32ToString() map[int32]string {
	if x != nil {
		return x.Sfixed32ToString
	}
	return nil
}

func (x *TestMap) GetUint32ToString() map[uint32]string {
	if x != nil {
		return x.Uint32ToString
	}
	return nil
}

func (x *TestMap) GetFixed32ToString() map[uint32]string {
	if x != nil {
		return x.Fixed32ToString
	}
	return nil
}

func (x *TestMap) GetInt64ToString() map[int64]string {
	if x != nil {
		return x.Int64ToString
	}
	return nil
}

func (x *TestMap) GetSint64ToString() map[int64]string {
	if x != nil {
		return x.Sint64ToString
	}
	return nil
}

func (x *TestMap) GetSfixed64ToString() map[int64]string {
	if x != nil {
		return x.Sfixed64ToString
	}
	return nil
}

func (x *TestMap) GetUint64ToString() map[uint64]string {
	if x != nil {
		return x.Uint64ToString
	}
	return nil
}

func (x *TestMap) GetFixed64ToString() map[uint64]string {
	if x != nil {
		return x.Fixed64ToString
	}
	return nil
}

func (x *TestMap) GetStringToString() map[string]string {
	if x != nil {
		return x.StringToString
	}
	return nil
}

func (x *TestMap) GetStringToBool() map[string]bool {
	if x != nil {
		return x.StringToBool
	}
	return nil
}

func (x *TestMap) GetStringToInt32() map[string]int32 {
	if x != nil {
		return x.StringToInt32
	}
	return nil
}

func (x *TestMap) GetStringToSint32() map[string]int32 {
	if x != nil {
		return x.StringToSint32
	}
	return nil
}

func (x *TestMap) GetStringToSfixed32() map[string]int32 {
	if x != nil {
		return x.StringToSfixed32
	}
	return nil
}

func (x *TestMap) GetStringToUint32() map[string]uint32 {
	if x != nil {
		return x.StringToUint32
	}
	return nil
}

func (x *TestMap) GetStringToFixed32() map[string]uint32 {
	if x != nil {
		return x.StringToFixed32
	}
	return nil
}

func (x *TestMap) GetStringToInt64() map[string]int64 {
	if x != nil {
		return x.StringToInt64
	}
	return nil
}

func (x *TestMap) GetStringToSint64() map[string]int64 {
	if x != nil {
		return x.StringToSint64
	}
	return nil
}

func (x *TestMap) GetStringToSfixed64() map[string]int64 {
	if x != nil {
		return x.StringToSfixed64
	}
	return nil
}

func (x *TestMap) GetStringToUint64() map[string]uint64 {
	if x != nil {
		return x.StringToUint64
	}
	return nil
}

func (x *TestMap) GetStringToFixed64() map[string]uint64 {
	if x != nil {
		return x.StringToFixed64
	}
	return nil
}

func (x *TestMap) GetStringToFloat() map[string]float32 {
	if x != nil {
		return x.StringToFloat
	}
	return nil
}

func (x *TestMap) GetStringToDouble() map[string]float64 {
	if x != nil {
		return x.StringToDouble
	}
	return nil
}

func (x *TestMap) GetStringToBytes() map[string][]byte {
	if x != nil {
		return x.StringToBytes
	}
	return nil
}

func (x *TestMap) GetStringToEnum() map[string]Enum {
	if x != nil {
		return x.StringToEnum
	}
	return nil
}

func (x *TestMap) GetStringToMessage() map[string]*TestMessage {
	if x != nil {
		return x.StringToMessage
	}
	return nil
}

type TestWellKnown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      *durationpb.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Struct        *structpb.Struct       `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
	List          *structpb.ListValue    `protobuf:"bytes,3,opt,name=list,proto3" json:"list,omitempty"`
	Value         *structpb.Value        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWellKnown) Reset() {
	*x = TestWellKnown{}
	mi := &file_protopatch_v1_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWellKnown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWellKnown) ProtoMessage() {}

func (x *TestWellKnown) ProtoReflect() protoreflect.Message {
	mi := &file_protopatch_v1_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWellKnown.ProtoReflect.Descriptor instead.
func (*TestWellKnown) Descriptor() ([]byte, []int) {
	return file_protopatch_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *TestWellKnown) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TestWellKnown) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *TestWellKnown) GetList() *structpb.ListValue {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TestWellKnown) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TestWellKnown) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_protopatch_v1_types_proto protoreflect.FileDescriptor

var file_protopatch_v1_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x05, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52,
	0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0a, 0x77, 0x65, 0x6c, 0x6c, 0x5f,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x09, 0x77, 0x65, 0x6c, 0x6c, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xd7, 0x04, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x10, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x18,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x30, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x30, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd1,
	0x03, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0f, 0x52,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x03, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x06, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xfa, 0x21, 0x0a, 0x07, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x4e,
	0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x51,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x12, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x54,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a,
	0x11, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x68, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61,
	0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5a, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x71, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x72, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x70,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x57, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x74, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x6f, 0x6f,
	0x6c, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x54,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5e, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x8f, 0x02, 0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2a, 0x38, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x42, 0xc0, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x69, 0x73,
	0x68, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58,
	0x58, 0xaa, 0x02, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protopatch_v1_types_proto_rawDescOnce sync.Once
	file_protopatch_v1_types_proto_rawDescData = file_protopatch_v1_types_proto_rawDesc
)

func file_protopatch_v1_types_proto_rawDescGZIP() []byte {
	file_protopatch_v1_types_proto_rawDescOnce.Do(func() {
		file_protopatch_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_protopatch_v1_types_proto_rawDescData)
	})
	return file_protopatch_v1_types_proto_rawDescData
}

var file_protopatch_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protopatch_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_protopatch_v1_types_proto_goTypes = []any{
	(Enum)(0),                     // 0: protopatch.v1.Enum
	(*TestMessage)(nil),           // 1: protopatch.v1.TestMessage
	(*TestOneof)(nil),             // 2: protopatch.v1.TestOneof
	(*TestList)(nil),              // 3: protopatch.v1.TestList
	(*TestMap)(nil),               // 4: protopatch.v1.TestMap
	(*TestWellKnown)(nil),         // 5: protopatch.v1.TestWellKnown
	nil,                           // 6: protopatch.v1.TestMap.BoolToStringEntry
	nil,                           // 7: protopatch.v1.TestMap.Int32ToStringEntry
	nil,                           // 8: protopatch.v1.TestMap.Sint32ToStringEntry
	nil,                           // 9: protopatch.v1.TestMap.Sfixed32ToStringEntry
	nil,                           // 10: protopatch.v1.TestMap.Uint32ToStringEntry
	nil,                           // 11: protopatch.v1.TestMap.Fixed32ToStringEntry
	nil,                           // 12: protopatch.v1.TestMap.Int64ToStringEntry
	nil,                           // 13: protopatch.v1.TestMap.Sint64ToStringEntry
	nil,                           // 14: protopatch.v1.TestMap.Sfixed64ToStringEntry
	nil,                           // 15: protopatch.v1.TestMap.Uint64ToStringEntry
	nil,                           // 16: protopatch.v1.TestMap.Fixed64ToStringEntry
	nil,                           // 17: protopatch.v1.TestMap.StringToStringEntry
	nil,                           // 18: protopatch.v1.TestMap.StringToBoolEntry
	nil,                           // 19: protopatch.v1.TestMap.StringToInt32Entry
	nil,                           // 20: protopatch.v1.TestMap.StringToSint32Entry
	nil,                           // 21: protopatch.v1.TestMap.StringToSfixed32Entry
	nil,                           // 22: protopatch.v1.TestMap.StringToUint32Entry
	nil,                           // 23: protopatch.v1.TestMap.StringToFixed32Entry
	nil,                           // 24: protopatch.v1.TestMap.StringToInt64Entry
	nil,                           // 25: protopatch.v1.TestMap.StringToSint64Entry
	nil,                           // 26: protopatch.v1.TestMap.StringToSfixed64Entry
	nil,                           // 27: protopatch.v1.TestMap.StringToUint64Entry
	nil,                           // 28: protopatch.v1.TestMap.StringToFixed64Entry
	nil,                           // 29: protopatch.v1.TestMap.StringToFloatEntry
	nil,                           // 30: protopatch.v1.TestMap.StringToDoubleEntry
	nil,                           // 31: protopatch.v1.TestMap.StringToBytesEntry
	nil,                           // 32: protopatch.v1.TestMap.StringToEnumEntry
	nil,                           // 33: protopatch.v1.TestMap.StringToMessageEntry
	(*durationpb.Duration)(nil),   // 34: google.protobuf.Duration
	(*structpb.Struct)(nil),       // 35: google.protobuf.Struct
	(*structpb.ListValue)(nil),    // 36: google.protobuf.ListValue
	(*structpb.Value)(nil),        // 37: google.protobuf.Value
	(*timestamppb.Timestamp)(nil), // 38: google.protobuf.Timestamp
}
var file_protopatch_v1_types_proto_depIdxs = []int32{
	0,  // 0: protopatch.v1.TestMessage.enum:type_name -> protopatch.v1.Enum
	1,  // 1: protopatch.v1.TestMessage.message:type_name -> protopatch.v1.TestMessage
	2,  // 2: protopatch.v1.TestMessage.oneof:type_name -> protopatch.v1.TestOneof
	3,  // 3: protopatch.v1.TestMessage.list:type_name -> protopatch.v1.TestList
	4,  // 4: protopatch.v1.TestMessage.map:type_name -> protopatch.v1.TestMap
	5,  // 5: protopatch.v1.TestMessage.well_known:type_name -> protopatch.v1.TestWellKnown
	0,  // 6: protopatch.v1.TestOneof.enum:type_name -> protopatch.v1.Enum
	1,  // 7: protopatch.v1.TestOneof.message:type_name -> protopatch.v1.TestMessage
	1,  // 8: protopatch.v1.TestOneof.single_message_0:type_name -> protopatch.v1.TestMessage
	0,  // 9: protopatch.v1.TestList.enum:type_name -> protopatch.v1.Enum
	1,  // 10: protopatch.v1.TestList.message:type_name -> protopatch.v1.TestMessage
	6,  // 11: protopatch.v1.TestMap.bool_to_string:type_name -> protopatch.v1.TestMap.BoolToStringEntry
	7,  // 12: protopatch.v1.TestMap.int32_to_string:type_name -> protopatch.v1.TestMap.Int32ToStringEntry
	8,  // 13: protopatch.v1.TestMap.sint32_to_string:type_name -> protopatch.v1.TestMap.Sint32ToStringEntry
	9,  // 14: protopatch.v1.TestMap.sfixed32_to_string:type_name -> protopatch.v1.TestMap.Sfixed32ToStringEntry
	10, // 15: protopatch.v1.TestMap.uint32_to_string:type_name -> protopatch.v1.TestMap.Uint32ToStringEntry
	11, // 16: protopatch.v1.TestMap.fixed32_to_string:type_name -> protopatch.v1.TestMap.Fixed32ToStringEntry
	12, // 17: protopatch.v1.TestMap.int64_to_string:type_name -> protopatch.v1.TestMap.Int64ToStringEntry
	13, // 18: protopatch.v1.TestMap.sint64_to_string:type_name -> protopatch.v1.TestMap.Sint64ToStringEntry
	14, // 19: protopatch.v1.TestMap.sfixed64_to_string:type_name -> protopatch.v1.TestMap.Sfixed64ToStringEntry
	15, // 20: protopatch.v1.TestMap.uint64_to_string:type_name -> protopatch.v1.TestMap.Uint64ToStringEntry
	16, // 21: protopatch.v1.TestMap.fixed64_to_string:type_name -> protopatch.v1.TestMap.Fixed64ToStringEntry
	17, // 22: protopatch.v1.TestMap.string_to_string:type_name -> protopatch.v1.TestMap.StringToStringEntry
	18, // 23: protopatch.v1.TestMap.string_to_bool:type_name -> protopatch.v1.TestMap.StringToBoolEntry
	19, // 24: protopatch.v1.TestMap.string_to_int32:type_name -> protopatch.v1.TestMap.StringToInt32Entry
	20, // 25: protopatch.v1.TestMap.string_to_sint32:type_name -> protopatch.v1.TestMap.StringToSint32Entry
	21, // 26: protopatch.v1.TestMap.string_to_sfixed32:type_name -> protopatch.v1.TestMap.StringToSfixed32Entry
	22, // 27: protopatch.v1.TestMap.string_to_uint32:type_name -> protopatch.v1.TestMap.StringToUint32Entry
	23, // 28: protopatch.v1.TestMap.string_to_fixed32:type_name -> protopatch.v1.TestMap.StringToFixed32Entry
	24, // 29: protopatch.v1.TestMap.string_to_int64:type_name -> protopatch.v1.TestMap.StringToInt64Entry
	25, // 30: protopatch.v1.TestMap.string_to_sint64:type_name -> protopatch.v1.TestMap.StringToSint64Entry
	26, // 31: protopatch.v1.TestMap.string_to_sfixed64:type_name -> protopatch.v1.TestMap.StringToSfixed64Entry
	27, // 32: protopatch.v1.TestMap.string_to_uint64:type_name -> protopatch.v1.TestMap.StringToUint64Entry
	28, // 33: protopatch.v1.TestMap.string_to_fixed64:type_name -> protopatch.v1.TestMap.StringToFixed64Entry
	29, // 34: protopatch.v1.TestMap.string_to_float:type_name -> protopatch.v1.TestMap.StringToFloatEntry
	30, // 35: protopatch.v1.TestMap.string_to_double:type_name -> protopatch.v1.TestMap.StringToDoubleEntry
	31, // 36: protopatch.v1.TestMap.string_to_bytes:type_name -> protopatch.v1.TestMap.StringToBytesEntry
	32, // 37: protopatch.v1.TestMap.string_to_enum:type_name -> protopatch.v1.TestMap.StringToEnumEntry
	33, // 38: protopatch.v1.TestMap.string_to_message:type_name -> protopatch.v1.TestMap.StringToMessageEntry
	34, // 39: protopatch.v1.TestWellKnown.duration:type_name -> google.protobuf.Duration
	35, // 40: protopatch.v1.TestWellKnown.struct:type_name -> google.protobuf.Struct
	36, // 41: protopatch.v1.TestWellKnown.list:type_name -> google.protobuf.ListValue
	37, // 42: protopatch.v1.TestWellKnown.value:type_name -> google.protobuf.Value
	38, // 43: protopatch.v1.TestWellKnown.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 44: protopatch.v1.TestMap.StringToEnumEntry.value:type_name -> protopatch.v1.Enum
	1,  // 45: protopatch.v1.TestMap.StringToMessageEntry.value:type_name -> protopatch.v1.TestMessage
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_protopatch_v1_types_proto_init() }
func file_protopatch_v1_types_proto_init() {
	if File_protopatch_v1_types_proto != nil {
		return
	}
	file_protopatch_v1_types_proto_msgTypes[1].OneofWrappers = []any{
		(*TestOneof_Bool)(nil),
		(*TestOneof_Int32)(nil),
		(*TestOneof_Sint32)(nil),
		(*TestOneof_Sfixed32)(nil),
		(*TestOneof_Uint32)(nil),
		(*TestOneof_Fixed32)(nil),
		(*TestOneof_Int64)(nil),
		(*TestOneof_Sint64)(nil),
		(*TestOneof_Sfixed64)(nil),
		(*TestOneof_Uint64)(nil),
		(*TestOneof_Fixed64)(nil),
		(*TestOneof_Float)(nil),
		(*TestOneof_Double)(nil),
		(*TestOneof_String_)(nil),
		(*TestOneof_Bytes)(nil),
		(*TestOneof_Enum)(nil),
		(*TestOneof_Message)(nil),
		(*TestOneof_SingleMessage_0)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protopatch_v1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protopatch_v1_types_proto_goTypes,
		DependencyIndexes: file_protopatch_v1_types_proto_depIdxs,
		EnumInfos:         file_protopatch_v1_types_proto_enumTypes,
		MessageInfos:      file_protopatch_v1_types_proto_msgTypes,
	}.Build()
	File_protopatch_v1_types_proto = out.File
	file_protopatch_v1_types_proto_rawDesc = nil
	file_protopatch_v1_types_proto_goTypes = nil
	file_protopatch_v1_types_proto_depIdxs = nil
}
